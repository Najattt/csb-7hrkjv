{"version":3,"sources":["Componet/Login/Login.js","Componet/SignUp/SignUp.jsx","Store/StoreConstants.js","Store/Action/ChatsAction.js","Store/Action/LoginAction.js","Store/Action/SignUpAction.js","Store/Action/UserAction.jsx","Services/APIService.js","Utils/Constansts.jsx","Utils/CommonUtil.jsx","Componet/UtilsComponets/Wave.jsx","Componet/Chat/MiddleChat/ChatComponent.jsx","Componet/Chat/RightChat/UserProfile.jsx","Componet/Chat/RightChat/UsersComponent.jsx","Componet/UtilsComponets/UserOption.jsx","Componet/UtilsComponets/MultiSelect.jsx","Componet/Chat/LeftChat/CreateChatGroupComponet.jsx","Componet/Chat/LeftChat/UserChatComponet.jsx","Componet/UtilsComponets/DropDown.jsx","Componet/Chat/LeftChat/ChatLeftComponet.jsx","Container/Chat/ChatContainer.jsx","Container/MainContainer.jsx","App.js","Store/Reducer/ChatReducer.js","Store/index.js","Store/Reducer/LoginReducer.js","Store/Reducer/UsersReducer.js","Store/Reducer/ChatMessagesReducer.js","Store/Reducer/SignUpReducer.js","Store/ConfigureStore.js","index.js"],"names":["Login","props","loginForm","setLoginForm","useState","password","userId","handleInputChange","e","target","name","value","_jsx","className","children","_jsxs","type","onChange","style","paddingBottom","color","loginInfo","message","onClick","login","console","log","signIn","SignUp","signupForm","setSignupForm","firstName","lastName","signUpData","useSelector","state","signUp","isError","display","float","createAccount","gotoLogin","StoreConstants","LOGIN_LOADING","LOGIN_SUCCESS","LOGIN_FAILED","SIGNUP_LOADING","SIGNUP_SUCCESS","SIGNUP_FAILED","FETCH_USERS_LOADING","FETCH_USERS_SUCCESS","FETCH_USERS_FAILED","FETCH_CHAT_MSGS_LOADING","FETCH_CHAT_MSGS_SUCCESS","FETCH_CHAT_MSGS_FAILED","FETCH_CHATS_LOADING","FETCH_CHATS_SUCCESS","FETCH_CHATS_FAILED","MSG_SEND_SUCCESS","MSG_SEND_FAILED","GROUP_MSG_SEND_SUCCESS","GROUP_MSG_SEND_FAILED","FETCH_GROUP_CHATS_SUCCESS","FETCH_GROUP_CHATS_FAILED","CREATE_GROUP_SUCCESS","CREATE_GROUP_FAILED","RECIVE_GROUP_CHAT_MSG_SUCCESS","RECIVE_CHAT_MESSAGE_TYPING","CHAT_MESSAGE_TYPING_STOP","fetchChatsFailed","faildMessage","messageSentSuccss","response","messageSentFailed","groupMessageSentFailed","fetchGroupChatsFailed","createGroupFailed","typingMessages","loginFailed","signUpFailed","fetchUsersFailed","BASE_URL","API","SIGN_UP","SIGN_IN","FETCH_USERS","SNED_MSG","FETCH_CHAT_MSGS","FETCH_CHATS","FETCH_GROUP_CHAT_MSGS","SNED_GROUP_MSG","CREATE_GROUP","SEND_TYPING_MESSAGE","signUpAPI","payload","dispatch","fetch","headers","method","body","JSON","stringify","then","json","statusCode","signUpSuccss","catch","err","signInAPI","loginSuccss","result","getUsersAPI","fetchUsersSuccss","description","getChatsAPI","fetchChatsSuccss","getGroupChatMessagesAPI","fetchGroupChatsSuccss","sendGroupMessageAPI","groupMessageSentSuccss","createGroupAPI","createGroupSuccss","ChatConstants","GROUP","USER","CHAT_USER_TYPING","GROUP_CHAT_USER_TYPING","getFormatedDate","date","dt","Date","currentDate","m","getMonth","toString","padStart","d","getDate","y","getFullYear","time","concat","getHours","getMinutes","getSeconds","getDay","getDateForLeftSideChat","Wave","typing","showName","userNameClass","waveClass","useDispatch","useEffect","setTimeout","id","class","ChatComponet","oldChat","recipientUser","chats","chatType","users","messageText","setMessage","messagesEndRef","useRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","block","inline","sendMessage","preventDefault","msg","senderId","data","recipientId","content","chatId","chatRoomId","getUser","i","findIndex","user","populateMsg","chat","index","senderUserId","rightSideMsg","messageTimestamp","leftSideMsg","backgroundImage","avatarUrl","reciverUserId","src","alt","chatRoomName","getChatHeader","chatMessages","length","map","ref","isTyping","height","placeholder","onKeyPress","key","receiverId","sendTypingNotification","UserProfile","checked","chatUserProfile","handleUser","chatUserIcon","UsersComponent","startChat","closeOpenOption","val","UserOption","React","Component","constructor","super","this","selected","handleChange","bind","setState","prevState","onOptionChange","render","MultiSelect","selectedOptions","onOptionsChange","option","push","indexOf","splice","title","options","CreateChatGroup","groupInfo","setGroupInfo","backFromCreateGroup","clickCreateGroup","groupData","groupName","groupMembers","submitCreateGroup","padding","UserChatComponet","chatList","setChatList","searchChat","setSearchChat","openUserChat","getUserObj","obj","reciverUser","senderUser","renderUsers","marginLeft","lastTimestamp","lastMessageSentBy","lastMessage","textAlign","renderGroups","Dropdown","dropDownList","item","selectedItem","ChatLeftComponet","openOptions","setOpenOptions","createGroup","setCreateGroup","usersListPage","setusersListPage","clickOpenOption","prev","window","location","reload","handelCloseOpenOption","_chats","chatObj","stompClient","ChatContainer","setRecipientUser","setOldChat","setChatType","useLayoutEffect","connect","Stomp","require","SockJS","origin","over","onConnected","onError","subscribe","onMessageReceived","notification","parse","messageType","getCurrentChat","sendTypingNotificationAPI","MainContainer","handleScroll","isSignIn","isLogin","pure","App","upSertChat","array","_item","upSertGroupChat","addGroupMessegesToChat","groups","chatMessageTypingStart","currentChat","parseInt","chatMessageTypingStop","sortChats","sort","a","b","createdTimestamp","rootReducer","combineReducers","arguments","undefined","action","loginType","isLoading","failedMessage","middleware","thunk","appStore","createStore","applyMiddleware","ReactDOM","Provider","store","document","getElementById"],"mappings":"kMA6CeA,MAzCf,SAAeC,GAEX,MAAOC,EAAWC,GAAgBC,mBAAS,CAAEC,SAAU,GAAIC,OAAQ,KAQ7DC,EAAoBC,IACtBL,EAAa,IACND,EACH,CAACM,EAAEC,OAAOC,MAAOF,EAAEC,OAAOE,OAC5B,EAGN,OACIC,cAAA,OAAKC,UAAU,kBAAiBC,SAC5BC,eAAA,OAAKF,UAAU,aAAYC,SAAA,CACvBC,eAAA,OAAKF,UAAU,OAAMC,SAAA,CACjBF,cAAA,SAAOC,UAAU,aAAYC,SAAC,YAC9BF,cAAA,SAAOI,KAAK,QAAQH,UAAU,iCAAiCH,KAAK,SAASO,SAAUV,OAE3FQ,eAAA,OAAKF,UAAU,OAAMC,SAAA,CACjBF,cAAA,SAAOC,UAAU,aAAYC,SAAC,aAC9BF,cAAA,SAAOI,KAAK,WAAWH,UAAU,6BAA6BH,KAAK,WAAWO,SAAUV,OAE5FK,cAAA,OAAKM,MAAO,CAACC,cAAe,OAAOC,MAAM,OAAON,SAAEF,cAAA,QAAAE,SAAOb,EAAMoB,UAAUC,YAEzEV,cAAA,UAAQI,KAAK,SAASH,UAAU,gCAAgCU,QAzB9DC,KACVC,QAAQC,IAAIxB,GACZD,EAAM0B,OAAOzB,EAAU,EAuBgEY,SAAC,cAUhG,E,MCiBec,MAxDC3B,IAEZ,MAAO4B,EAAYC,GAAiB1B,mBAAS,CAAEE,OAAQ,GAAID,SAAU,GAAI0B,UAAW,GAAIC,SAAU,KAE5FC,EAAaC,aAAYC,GAASA,EAAMC,SACxC7B,EAAoBC,IACtBsB,EAAc,IACPD,EACH,CAACrB,EAAEC,OAAOC,MAAOF,EAAEC,OAAOE,OAC5B,EAUN,OACII,eAAA,OAAKF,UAAU,mBAAkBC,SAAA,CAC5BW,QAAQC,IAAI,aAAaO,GAC1BlB,eAAA,OAAKF,UAAU,cAAaC,SAAA,CAC5BF,cAAA,OAAKC,UAAYoB,EAAWI,QAAsB,UAAZ,YAAsBvB,SAAEmB,EAAWX,UACrEP,eAAA,OAAKF,UAAU,OAAMC,SAAA,CACjBF,cAAA,SAAOC,UAAU,aAAYC,SAAC,YAC9BF,cAAA,SAAOI,KAAK,QAAQH,UAAU,eAAeH,KAAK,SAASO,SAAUV,OAEzEQ,eAAA,OAAKF,UAAU,OAAMC,SAAA,CACjBF,cAAA,SAAOC,UAAU,aAAYC,SAAC,aAC9BF,cAAA,SAAOI,KAAK,WAAWH,UAAU,eAAeH,KAAK,WAAWO,SAAUV,OAE9EK,cAAA,OAAKC,UAAU,OAAOK,MAAO,CAAEoB,QAAS,SAAUxB,SAC9CC,eAAA,OAAKG,MAAO,CAAEoB,QAAS,aAAcxB,SAAA,CACjCC,eAAA,OAAKG,MAAO,CAAEoB,QAAS,eAAgBxB,SAAA,CACnCF,cAAA,SAAOC,UAAU,aAAYC,SAAC,eAC9BF,cAAA,SAAOI,KAAK,QAAQH,UAAU,eAAeH,KAAK,YAAYO,SAAUV,OAE5EQ,eAAA,OAAKG,MAAO,CAAEoB,QAAS,eAAgBxB,SAAA,CACnCF,cAAA,SAAOC,UAAU,aAAYC,SAAC,cAC9BF,cAAA,SAAOI,KAAK,QAAQH,UAAU,eAAeH,KAAK,WAAWO,SAAUV,YAInFK,cAAA,UACAA,cAAA,OAAAE,SAAKF,cAAA,UAAQI,KAAK,SAASH,UAAU,kBAAkBK,MAAO,CAACqB,MAAM,SAAWhB,QAlCtEiB,KAClBvC,EAAMuC,cAAcX,EAAW,EAiCgFf,SAAC,qBACxGF,cAAA,OAAAE,SAAKF,cAAA,UAAQI,KAAK,SAASH,UAAU,eAAeU,QAhC9CkB,KACdhB,QAAQC,IAAI,WACZzB,EAAMwC,WAAW,EA8B8D3B,SAAC,wBAM1E,ECzDP,MAAM4B,EAAiB,CAC1BC,cAAe,gBACfC,cAAe,gBACfC,aAAc,eACdC,eAAgB,iBAChBC,eAAgB,iBAChBC,cAAe,gBACfC,oBAAqB,sBACrBC,oBAAqB,sBACrBC,mBAAoB,qBACpBC,wBAAyB,0BACzBC,wBAAyB,0BACzBC,uBAAwB,yBACxBC,oBAAqB,0BACrBC,oBAAqB,0BACrBC,mBAAoB,yBACpBC,iBAAkB,mBAClBC,gBAAiB,kBACjBC,uBAAwB,yBACxBC,sBAAuB,wBACvBC,0BAA2B,4BAC3BC,yBAA0B,2BAC1BC,qBAAsB,uBACtBC,oBAAqB,sBACrBC,8BAA+B,gCAC/BC,2BAA4B,6BAC5BC,yBAA0B,4BCXvB,SAASC,EAAiBC,GAC7B,MAAO,CACHtD,KAAM0B,EAAee,mBACrBa,eAER,CAEO,SAASC,EAAkBC,GAC9B,MAAO,CACHxD,KAAM0B,EAAegB,iBACrBc,WAER,CAEO,SAASC,EAAkBH,GAC9B,MAAO,CACHtD,KAAM0B,EAAeiB,gBACrBW,eAER,CASO,SAASI,EAAuBJ,GACnC,MAAO,CACHtD,KAAM0B,EAAemB,sBACrBS,eAER,CASO,SAASK,EAAsBL,GAClC,MAAO,CACHtD,KAAM0B,EAAeqB,yBACrBO,eAER,CASO,SAASM,EAAkBN,GAC9B,MAAO,CACHtD,KAAM0B,EAAeuB,oBACrBK,eAER,CASO,SAASO,EAAeL,GAC3B,MAAM,CACFxD,KAAM0B,EAAeyB,2BACrBK,WAER,CC3EO,SAASM,EAAYN,GACxB,MAAO,CACHxD,KAAM0B,EAAeG,aACrB2B,WAER,CCLO,SAASO,EAAaP,GACzB,MAAO,CACHxD,KAAM0B,EAAeM,cACrBwB,WAER,CCLO,SAASQ,EAAiBV,GAC7B,MAAO,CACHtD,KAAM0B,EAAeS,mBACrBmB,eAER,CCdA,MAAMW,EAAW,6BACXC,EAAM,CACRC,QAASF,EAAW,cACpBG,QAASH,EAAW,cACpBI,YAAaJ,EAAW,QACxBK,SAAUL,EAAW,OACrBM,gBAAiBN,EAAW,QAC5BO,YAAaP,EAAW,QACxBQ,sBAAuBR,EAAW,uBAClCS,eAAgBT,EAAW,2BAC3BU,aAAcV,EAAW,sBACzBW,oBAAqBX,EAAW,0BAI7B,SAASY,EAAUC,GACtB,OAAOC,IACHA,EFpBG,CACH/E,KAAM0B,EAAeI,iBEoBdkD,MAAMd,EAAIC,QAAS,CACtBc,QAAS,CACL,eAAgB,oBAEpBC,OAAQ,OACRC,KAAMC,KAAKC,UAAUP,KACtBQ,MAAK9B,GACGA,EAAS+B,SACjBD,MAAK9B,IACJ/C,QAAQC,IAAI8C,GACRA,GAAoC,IAAxBA,EAASgC,WACrBT,EF3BT,SAAsBvB,GACzB,MAAO,CACHxD,KAAM0B,EAAeK,eACrByB,WAER,CEsByBiC,CAAajC,IAEtBuB,EAAShB,EAAaP,GAC1B,IACDkC,OAAMC,IACLlF,QAAQC,IAAIiF,GACZZ,EAAShB,EAAa,kBAAkB,IAGpD,CAEO,SAAS6B,EAAUd,GACtB,OAAOC,IACHA,EH7CG,CACH/E,KAAM0B,EAAeC,gBG6CdqD,MAAMd,EAAIE,QAAS,CACtBa,QAAS,CACL,eAAgB,oBAEpBC,OAAQ,OACRC,KAAMC,KAAKC,UAAUP,KACtBQ,MAAK9B,GACGA,EAAS+B,SACjBD,MAAK9B,IACJ/C,QAAQC,IAAI8C,GACRA,GAAoC,IAAxBA,EAASgC,WACrBT,EHpDT,SAAqBvB,GACxB,MAAO,CACHxD,KAAM0B,EAAeE,cACrB4B,WAER,CG+CyBqC,CAAYrC,EAASsC,OAAO,KAErCf,EAASjB,EAAYN,GACzB,IACDkC,OAAMC,IACLlF,QAAQC,IAAIiF,GACZZ,EAASjB,EAAY,gBAAgB,IAGjD,CA0BO,SAASiC,IACZ,OAAOhB,IACHA,ED9FG,CACH/E,KAAM0B,EAAeO,sBC8Fd+C,MAAMd,EAAIG,YAAa,CAC1BY,QAAS,CACL,eAAgB,oBAEpBC,OAAQ,QACTI,MAAK9B,GACGA,EAAS+B,SACjBD,MAAK9B,IACJ/C,QAAQC,IAAI8C,GACRA,GAAoC,IAAxBA,EAASgC,WACrBT,EDpGT,SAA0BvB,GAC7B,MAAO,CACHxD,KAAM0B,EAAeQ,oBACrBsB,WAER,CC+FyBwC,CAAiBxC,EAASsC,SAEnCf,EAASf,EAAiBR,EAASyC,aACvC,IACDP,OAAMC,IACLlF,QAAQC,IAAIiF,GACZZ,EAASf,EAAiB,sBAAsB,IAG5D,CA0BO,SAASkC,EAAY5G,GACxB,OAAOyF,IACHA,EJ9IG,CACH/E,KAAM0B,EAAea,sBI8IdyC,MAAMd,EAAIM,YAAclF,EAAQ,CACnC2F,QAAS,CACL,eAAgB,oBAEpBC,OAAQ,QACTI,MAAK9B,GACGA,EAAS+B,SACjBD,MAAK9B,IACJ/C,QAAQC,IAAI8C,GACRA,GAAoC,IAAxBA,EAASgC,WACrBT,EJpJT,SAA0BvB,GAC7B,MAAO,CACHxD,KAAM0B,EAAec,oBACrBgB,WAER,CI+IyB2C,CAAiB3C,EAASsC,SAEnCf,EAAS1B,EAAiBG,EAASyC,aACvC,IACDP,OAAMC,IACLlF,QAAQC,IAAIiF,GACZZ,EAAS1B,EAAiB,sBAAsB,IAG5D,CAEO,SAAS+C,EAAwB9G,GACpC,OAAOyF,GACIC,MAAMd,EAAIO,sBAAwBnF,EAAQ,CAC7C2F,QAAS,CACL,eAAgB,oBAEpBC,OAAQ,QACTI,MAAK9B,GACGA,EAAS+B,SACjBD,MAAK9B,IACJ/C,QAAQC,IAAI8C,GACRA,GAAoC,IAAxBA,EAASgC,WACrBT,EJjIT,SAA+BvB,GAClC,MAAO,CACHxD,KAAM0B,EAAeoB,0BACrBU,WAER,CI4HyB6C,CAAsB7C,EAASsC,SAExCf,EAASpB,EAAsBH,EAASyC,aAC5C,IACDP,OAAMC,IACLlF,QAAQC,IAAIiF,GACZZ,EAASpB,EAAsB,+BAA+B,GAG1E,CAEO,SAAS2C,EAAoBxB,GAChC,OAAOC,GACIC,MAAMd,EAAIQ,eAAgB,CAC7BO,QAAS,CACL,eAAgB,oBAEpBC,OAAQ,OACRC,KAAMC,KAAKC,UAAUP,KACtBQ,MAAK9B,GACGA,EAAS+B,SACjBD,MAAK9B,IACJ/C,QAAQC,IAAI8C,GACRA,GAAoC,IAAxBA,EAASgC,WACrBT,EJvKT,SAAgCvB,GACnC,MAAO,CACHxD,KAAM0B,EAAekB,uBACrBY,WAER,CIkKyB+C,CAAuB/C,EAASsC,OAAO,KAEhDf,EAASrB,EAAuBF,EAASyC,aAC7C,IACDP,OAAMC,IACLlF,QAAQC,IAAIiF,GACZZ,EAASrB,EAAuB,wBAAwB,GAGpE,CAEO,SAAS8C,EAAe1B,GAC3B,OAAOC,GACIC,MAAMd,EAAIS,aAAc,CAC3BM,QAAS,CACL,eAAgB,oBAEpBC,OAAQ,OACRC,KAAMC,KAAKC,UAAUP,KACtBQ,MAAK9B,GACGA,EAAS+B,SACjBD,MAAK9B,IACJ/C,QAAQC,IAAI8C,GACRA,GAAoC,IAAxBA,EAASgC,WACrBT,EJnKT,SAA2BvB,GAC9B,MAAO,CACHxD,KAAM0B,EAAesB,qBACrBQ,WAER,CI8JyBiD,CAAkBjD,EAASsC,OAAO,KAE3Cf,EAASnB,EAAkBJ,EAASyC,aACxC,IACDP,OAAMC,IACLlF,QAAQC,IAAIiF,GACZZ,EAASnB,EAAkB,0BAA0B,GAGjE,C,MC5OO,MAAO8C,EAAgB,CAC1BC,MAAO,QACPC,KAAM,OACNC,iBAAkB,mBAClBC,uBAAyB,0B,YCJtB,SAASC,EAAgBC,GAC5B,IAAIC,EAAK,IAAIC,KAAKF,GACdG,EAAc,IAAID,KAClBE,GAAMH,EAAGI,WAAa,GAAGC,WAAWC,SAAS,EAAG,KAChDC,EAAKP,EAAGQ,UAAUH,WAAWC,SAAS,EAAG,KACzCG,EAAKT,EAAGU,cAAcL,WAAWC,SAAS,EAAG,KAC7CK,EAAI,GAAAC,OAAOZ,EAAGa,WAAWR,WAAWC,SAAS,EAAG,KAAI,KAAAM,OAAIZ,EAAGc,aAAaT,WAAWC,SAAS,EAAG,KAAI,KAAAM,OAAIZ,EAAGe,aAAaV,WAAWC,SAAS,EAAG,MAElJ,OAAIN,EAAGgB,WAAad,EAAYc,SACrBL,EACDX,EAAGQ,YAAcN,EAAYM,UAAW,EACvC,aAAeG,EAElBX,EAAGU,gBAAkBR,EAAYQ,cAC1BH,EAAI,IAAMJ,EAAI,IAAMQ,EAEpBJ,EAAI,IAAMJ,EAASM,EAAI,IAAME,CAWhD,CACO,SAASM,EAAuBlB,GACnC,IAAIC,EAAK,IAAIC,KAAKF,GACdG,EAAc,IAAID,KAClBE,GAAMH,EAAGI,WAAa,GAAGC,WAAWC,SAAS,EAAG,KAChDC,EAAKP,EAAGQ,UAAUH,WAAWC,SAAS,EAAG,KACzCG,EAAKT,EAAGU,cAAcL,WAAWC,SAAS,EAAG,KAC7CK,EAAI,GAAAC,OAAOZ,EAAGa,WAAWR,WAAWC,SAAS,EAAG,KAAI,KAAAM,OAAIZ,EAAGc,aAAaT,WAAWC,SAAS,EAAG,MAEnG,OAAIN,EAAGgB,WAAad,EAAYc,SACrBL,EACDX,EAAGQ,YAAcN,EAAYM,UAAU,EACtC,YAEHR,EAAGU,gBAAkBR,EAAYQ,cAC1BH,EAAI,IAAMJ,EAEVI,EAAI,IAAMJ,EAASM,CAGtC,C,MCjBeS,MA1BDlJ,IACV,MAAM,KAAES,EAAI,OAAE0I,EAAM,SAAEC,EAAQ,cAACC,EAAa,UAACC,GAActJ,EACrD8F,EAAWyD,cAOjB,OANAC,qBAAU,KACNC,YACI,KAAM3D,UPkFiBvB,EOlFW4E,EPmFpC,CACFpI,KAAM0B,EAAe0B,yBACrBI,cAHD,IAA4BA,COlFmB,GAC1C,IACD,IAGHzD,eAAA,OAAAD,SAAA,CACIF,cAAA,OAAKC,UAAWyI,EAAcxI,SACzBuI,EACK3I,EAAO,aACP,YAGVK,eAAA,OAAK4I,GAAIJ,EAAUzI,SAAA,CACfF,cAAA,QAAMgJ,MAAM,QACZhJ,cAAA,QAAMgJ,MAAM,QACZhJ,cAAA,QAAMgJ,MAAM,aAEd,EC8NCC,MAlPO5J,IAElB,MAAM,QAAE6J,EAAO,cAAEC,EAAa,UAAE1I,EAAS,MAAE2I,EAAK,SAAEC,EAAQ,MAAEC,GAAUjK,EACtEwB,QAAQC,IAAIL,GACZ,MAAO8I,EAAaC,GAAchK,mBAAS,IACrCiK,EAAiBC,iBAAO,MAK9Bb,qBAAU,KAJac,MAAO,IAADC,EACH,QAAtBA,EAAAH,EAAeI,eAAO,IAAAD,GAAtBA,EAAwBE,eAAe,CAAEC,SAAU,SAAUC,MAAO,MAAOC,OAAQ,WAAY,EAI/FN,EAAgB,IAIpB,MAcMO,EAAetK,IACjBA,EAAEuK,iBACFtJ,QAAQC,IAAIsI,GACZ,IAAIgB,EAAM,CAAC,EAEPA,EADAf,IAAavC,EAAcE,KACrB,CACFqD,SAAU5J,EAAU6J,KAAKvB,GACzBwB,YAAapB,EAAcJ,GAC3ByB,QAASjB,EACTkB,OAAQvB,EAAQuB,QAGd,CACF,WAAcrB,EAAMsB,WACpB,QAAWnB,EACX,SAAY9I,EAAU6J,KAAKvB,IAGnC1J,EAAM6K,YAAYE,EAAKf,GACvBxI,QAAQC,IAAI,4BAA6B0E,KAAKC,UAAU2E,IAGtDZ,EAAW,GAAG,EAgBdmB,EAAW5B,IACb,IAAI6B,EAAItB,EAAMgB,KAAKO,WAAUC,GAAQA,EAAK/B,KAAOA,IACjD,OAAI6B,GAAK,EACEtB,EAAMgB,KAAKM,GAEX,IACX,EAmCEG,EAAcA,CAACC,EAAMC,IACnBD,GAAQA,EAAKE,cAAgBF,EAAKE,eAAiBzK,EAAU6J,KAAKvB,GAfrDoC,EAACb,EAAMW,IAEpBjL,cAAA,OAAiBC,UAAU,gBAAeC,SACtCC,eAAA,OAAKF,UAAU,aAAYC,SAAA,CACvBF,cAAA,OAAKC,UAAU,WAAUC,SACrBF,cAAA,OAAKC,UAAU,gBAAeC,SAAEiH,EAAgBmD,EAAKc,sBAEzDpL,cAAA,OAAKC,UAAU,WAAUC,SACpBoK,EAAK5J,cANRuK,GAcHE,CAAaH,EAAMC,GAnCdI,EAACf,EAAMW,KACvB,MAAMH,EAAOH,EAAQL,EAAKY,cAC1B,OACI/K,eAAA,OAAiBF,UAAU,eAAcC,SAAA,CACrCF,cAAA,OAAKC,UAAU,UAAUK,MAAO,CAAEgL,gBAAgB,OAADrD,OAAS6C,EAAKS,UAAS,QAExEpL,eAAA,OAAKF,UAAU,aAAYC,SAAA,CACvBC,eAAA,OAAKF,UAAU,WAAUC,SAAA,CACrBF,cAAA,OAAKC,UAAU,gBAAeC,SAAE4K,EAAK3J,YACrCnB,cAAA,OAAKC,UAAU,gBAAeC,SAAEiH,EAAgBmD,EAAKc,uBAGzDpL,cAAA,OAAKC,UAAU,WAAUC,SACpBoK,EAAK5J,eAVRuK,EAaJ,EAqBCI,CAAYL,EAAMC,GAmFjC,OAEIjL,cAAA,OAAKC,UAAU,yBAAwBC,SACnCF,cAAA,WAASC,UAAU,QAAOC,SACrBmJ,EACIlJ,eAAA,OAAAD,SAAA,CACGC,eAAA,UAAQF,UAAU,eAAcC,SAAA,CAtF7B8K,KACnB,GAAIA,GAAQA,EAAKP,OAAQ,CACrB,MAAMK,EAAOH,EAAQK,EAAKE,eAAiBzK,EAAU6J,KAAKvB,GAAKiC,EAAKQ,cAAgBR,EAAKE,cACzF,OAAIJ,EACQ3K,eAAA,OAAKF,UAAU,qBAAoBC,SAAA,CACtC4K,EAAKS,UACAvL,cAAA,OAAKyL,IAAKX,EAAKS,UAAWG,IAAI,SAASzL,UAAU,2BAA2BK,MAAO,CAAEqB,MAAO,UAC5F3B,cAAA,QAAMC,UAAU,wCACtBD,cAAA,OAAKC,UAAU,uBAAsBC,SAAE4K,EAAK3J,UAAY,IAAM2J,EAAK1J,WACnEpB,cAAA,KAAGC,UAAU,0BAGV,IAGf,CAAO,OAAI+K,GAAQA,EAAKN,WACZvK,eAAA,OAAKF,UAAU,qBAAoBC,SAAA,CACtC8K,EAAKO,UACAvL,cAAA,OAAKyL,IAAKT,EAAKO,UAAWG,IAAI,SAASzL,UAAU,6BACjDD,cAAA,QAAMC,UAAU,+CACtBE,eAAA,OAAKF,UAAU,wBAAuBC,SAAA,CAAC,IAAE8K,EAAKW,gBAC9C3L,cAAA,KAAGC,UAAU,qBAAoBC,SAAC,SAEhCiJ,EACEhJ,eAAA,OAAKF,UAAU,qBAAoBC,SAAA,CAClCiJ,EAAcoC,UACTvL,cAAA,OAAKyL,IAAKtC,EAAcoC,UAAWG,IAAI,SAASzL,UAAU,2BAA2BK,MAAO,CAAEqB,MAAO,UACrG3B,cAAA,QAAMC,UAAU,wCACtBD,cAAA,OAAKC,UAAU,uBAAsBC,SAAEiJ,EAAchI,UAAY,IAAMgI,EAAc/H,WACrFpB,cAAA,KAAGC,UAAU,+BANlB,CAQP,EAwDqB2L,CAAcxC,GACfpJ,cAAA,OAAKC,UAAU,uBAAsBC,SACjCF,cAAA,QAAAE,SAAMF,cAAA,KAAGC,UAAU,sBAI3BE,eAAA,QAAMF,UAAU,aAAa8I,GAAG,gBAAe7I,SAAA,CAC1CmJ,IAAavC,EAAcE,KACtB7G,eAAA,OAAAD,SAAA,CAAK,IAAEkJ,GAASA,EAAMyC,cAAgBzC,EAAMyC,aAAaC,OACvD1C,EAAMyC,aAAaE,KAAI,CAACf,EAAMJ,IAC1BG,EAAYC,EAAMJ,KAEpB,yBAEHxB,GAASA,EAAMyC,cAAgBzC,EAAMyC,aAAaC,OAC9C1C,EAAMyC,aAAaE,KAAI,CAACf,EAAMJ,IAC7BG,EAAYC,EAAMJ,KAEpB,mBAIV5K,cAAA,OAAKgM,IAAKvC,OA3ElBuB,KACZ,GAAIA,GAAQA,EAAKxC,QAAUwC,EAAKxC,OAAOyD,SAAU,CAC7C,GAAIjB,EAAKxC,OAAOa,WAAavC,EAAcE,KAAM,CAC7C,MAAM8D,EAAOH,EAAQK,EAAKE,eAAiBzK,EAAU6J,KAAKvB,GAAKiC,EAAKQ,cAAgBR,EAAKE,cACzF,OAAIJ,EACQ9K,cAAA,OAAAE,SACJF,cAACuI,EAAI,CACDzI,KAAMgL,EAAK3J,UACXqH,OAAQwC,EAAKxC,OACbC,UAAU,EACVC,cAAc,+BACdC,UAAU,kBAKX3I,cAAA,OAAKM,MAAO,CAAE4L,OAAQ,SAErC,CAAO,CACH,MAAMpB,EAAOH,EAAQK,EAAKxC,OAAO6B,UACjC,OAAIS,EACQ9K,cAAA,OAAAE,SACJF,cAACuI,EAAI,CACDzI,KAAMgL,EAAK3J,UACXqH,OAAQwC,EAAKxC,OACbC,UAAU,EACVC,cAAc,+BACdC,UAAU,kBAKX3I,cAAA,OAAKM,MAAO,CAAE4L,OAAQ,SAErC,CAGJ,CACI,OAAOlM,cAAA,OAAKM,MAAO,CAAE4L,OAAQ,SACjC,EAuCiB1D,CAAOY,GACRjJ,eAAA,OAAKF,UAAU,kBAAiBC,SAAA,CAC5BF,cAAA,SAAOI,KAAK,OAAOH,UAAU,cAAckM,YAAY,wBAAwBpM,MAAOwJ,EAAazJ,KAAK,cAAesM,WAvClHxM,IACX,UAAVA,EAAEyM,KACFnC,EAAYtK,EAChB,EAoC4KS,SA/KtJT,IACtB4J,EAAW5J,EAAEC,OAAOE,OACpB,MAAMgJ,EAAsB,OAAjBK,EAAMqB,QAAmBrB,EAAMqB,OAASrB,EAAMqB,OAA8B,MAApBrB,EAAMsB,YAAsBtB,EAAMsB,WAAatB,EAAMsB,WAAa,KACrI,GAAI9K,EAAEC,OAAOE,MAAM+L,QAAU,GAAK/C,EAAI,CAClC,MAAMP,EAAS,CACXO,GAAIA,EACJuD,WAAYnD,EAAcJ,GAC1BsB,SAAU5J,EAAU6J,KAAKvB,GACzBM,SAAUA,GAEdhK,EAAMkN,uBAAuB/D,EACjC,KAqKoBxI,cAAA,QAAMC,UAAU,iBAAiBU,QAASuJ,UAK/ClK,cAAA,OAAKC,UAAU,qBAAoBC,SAACF,cAAA,OAAKC,UAAU,mBAAkBC,SAAE,8BAGhF,E,YChOCsM,MAlBMnN,IACjB,MAAM,MAAC4L,EAAK,KAAEH,GAAQzL,EAItB,OACIW,cAAA,OAAAE,SAGAC,eAAA,OAAiBF,UAAWZ,EAAMoN,QAAUpN,EAAMqN,gBAAkB,qBAAuBrN,EAAMqN,gBAAkB/L,QAASf,IAP5GkL,KAChBzL,EAAMsN,WAAW7B,EAAK,EAM6G6B,CAAW7B,EAAK,EAAG5K,SAAA,CACjJ4K,EAAKS,UACAvL,cAAA,OAAKyL,IAAKX,EAAKS,UAAWG,IAAI,SAASzL,UAAU,6BACjDD,cAAA,QAAMC,UAAWZ,EAAMuN,eAC7BzM,eAAA,OAAKF,UAAW6K,EAAKS,UAAY,oCAAsC,mCAAmCrL,SAAA,CAAE,IAAE4K,EAAK3J,UAAY,IAAM2J,EAAK1J,cAJpI6J,IAMJ,ECoCC4B,MAlDSxN,IAEpB,MAAM,UAAEoB,EAAS,MAAE6I,GAAUjK,EAGvByN,EAAahC,IACfjK,QAAQC,IAAIgK,GACZzL,EAAMyN,UAAUhC,EAAK,EAOzB,OACI9K,cAAA,OAAAE,SACIC,eAAA,OAAKF,UAAU,GAAEC,SAAA,CACbC,eAAA,OAAKF,UAAU,oBAAmBC,SAAA,CAC/BF,cAAA,SAAOC,UAAU,cAAaC,SAAC,cAC/BF,cAAA,QAAMC,UAAU,cAAcU,QAVpBoM,KACrBlM,QAAQC,IAAI,2BACZzB,EAAM0N,iBAAiB,EAQ2C7M,SAAC,SAE3DF,cAAA,OAAAE,SACAF,cAAA,SAAOC,UAAU,+BAA+BkM,YAAY,cAAc/L,KAAK,WAE/EJ,cAAA,OAAKC,UAAU,YAAWC,SACrBoJ,GAASA,EAAMgB,MAAQhB,EAAMgB,KAAKwB,OAC9BxC,EAAMgB,KAAKyB,KAAI,CAACiB,EAAK/B,IAClB+B,EAAIjE,KAAOtI,EAAU6J,KAAKvB,GACpB,KACA/I,cAACwM,EAAW,CACV1B,KAAMkC,EACN/B,MAAOA,EACP0B,WAAYG,EACZJ,gBAAgB,yBAChBE,aAAa,qBAGvB,uBAIZ,ECzCd,MAAMK,UAAmBC,IAAMC,UAC3BC,YAAY/N,GACRgO,MAAMhO,GACNiO,KAAK/L,MAAQ,CAAEgM,UAAU,GACzBD,KAAKE,aAAeF,KAAKE,aAAaC,KAAKH,KAC/C,CAEAE,eACIF,KAAKI,UACDC,IAAS,CAAOJ,UAAWI,EAAUJ,aACrC,IAAMD,KAAKjO,MAAMuO,eAAeN,KAAKjO,MAAM0J,GAAIuE,KAAK/L,MAAMgM,WAElE,CAEAM,SACI,OACI7N,cAAA,OAAAE,SACIF,cAAA,OAAK+I,GAAIuE,KAAKjO,MAAM0J,GAAG7I,SACvBF,cAACwM,EAAW,CACR1B,KAAMwC,KAAKjO,MAAMyL,KACjBG,MAAOqC,KAAKjO,MAAM0J,GAClB4D,WAAYW,KAAKE,aACjBd,gBAAgB,iCAChBE,aAAa,iBACbH,QAASa,KAAK/L,MAAMgM,cAKpC,EAEWN,QC/Bf,MAAMa,UAAoBZ,IAAMC,UAC5BC,YAAY/N,GACRgO,MAAMhO,GACNiO,KAAK/L,MAAQ,CAAEwM,gBAAiB,IAChCT,KAAKU,gBAAkBV,KAAKU,gBAAgBP,KAAKH,KACrD,CAEAU,gBAAgBC,EAAQV,GAChBA,EACAD,KAAKI,UACDC,IACIA,EAAUI,gBAAgBG,KAAKD,GACxB,CACHF,gBAAiBJ,EAAUI,oBAGnC,IAAMT,KAAKjO,MAAM2O,gBAAgBV,KAAK/L,MAAMwM,mBAGhDT,KAAKI,UACDC,IACI,MAAM1C,EAAQ0C,EAAUI,gBAAgBI,QAAQF,GAIhD,OAHIhD,GAAS,GACT0C,EAAUI,gBAAgBK,OAAOnD,EAAO,GAErC,CACH8C,gBAAiBJ,EAAUI,gBAC9B,IAEL,IAAMT,KAAKjO,MAAM2O,gBAAgBV,KAAK/L,MAAMwM,kBAGxD,CAEAF,SACI,OACI1N,eAAA,YAAAD,SAAA,CACIF,cAAA,UAAAE,SAASoN,KAAKjO,MAAMgP,QACnBf,KAAKjO,MAAMiP,QAAQvC,KAAI,CAACkC,EAAQhD,IAC7BjL,cAACiN,EAAU,CACPnC,KAAMmD,EAENlF,GAAIkF,EAAOlF,GACXkF,OAAQA,EAAO9M,UACfyM,eAAgBN,KAAKU,iBAHhBC,EAAOlF,QAUhC,EAGW+E,QCLAS,MAjDUlP,IACrB,MAAM,MAAEiK,EAAK,UAAE7I,GAAcpB,GACtBmP,EAAWC,GAAgBjP,mBAAS,CAAE,UAAa,GAAI,aAAgB,KAyB9E,OACIW,eAAA,OAAKF,UAAU,6BAA4BC,SAAA,CACvCC,eAAA,OAAKF,UAAU,yBAAwBC,SAAA,CACnCF,cAAA,QAAMC,UAAU,oBAAmBC,SAAC,mBACpCF,cAAA,UAAQC,UAAU,kBAAkBU,QAAStB,EAAMqP,oBAAoBxO,SAAE,SAE7EC,eAAA,OAAKF,UAAU,qBAAoBC,SAAA,CAC/BF,cAAA,SAAOI,KAAK,OAAOH,UAAU,mBAAmBH,KAAK,YAAYqM,YAAY,mBAAmB9L,SA9BjFT,IACvB6O,EAAa,IACND,EACH,CAAC5O,EAAEC,OAAOC,MAAOF,EAAEC,OAAOE,OAC5B,IA2BMC,cAAA,UAAQC,UAAU,sBAAsBU,QAjB3BgO,KACrB,MAAMC,EAAY,CACd,aAAgBJ,EAAUK,UAC1B,gBAAmBL,EAAUM,aAC7B,UAAarO,EAAU6J,KAAKvB,IAEhC1J,EAAM0P,kBAAkBH,EAAU,EAWwC1O,SAAE,oBAExEF,cAAA,OAAKM,MAAO,CAAC0O,QAAS,OAAO9O,SAAC,4BAC9BF,cAAA,OAAAE,SACIF,cAAC8N,EAAW,CACRQ,QAAShF,EAAMgB,KACf0D,gBA/BWlD,IACvBjK,QAAQC,IAAIgK,GACZ2D,EAAa,IACND,EACHM,aAAehE,IAEnBjK,QAAQC,IAAI0N,EAAU,QA8BhB,E,MC6FCS,MArIW5P,IACtB,MAAM,MAAE+J,EAAK,QAAEF,EAAO,cAAEC,EAAa,UAAE1I,EAAS,MAAE6I,GAAUjK,GAErD6P,EAAUC,GAAe3P,mBAAS,KAClC4P,EAAYC,GAAiB7P,mBAAS,IACvC8P,EAAeA,CAAChF,EAAMlK,KACxBf,EAAMiQ,aAAahF,EAAMlK,EAAK,EAE5BmP,EAAcC,GACTA,EAAIC,aAAehP,EAAU6J,MAAQkF,EAAIC,YAAY1G,KAAOtI,EAAU6J,KAAKvB,GAAKyG,EAAIE,WAAaF,EAAIC,YAEnGnO,aAAYC,GAASA,EAAM6H,QAqBxC,MAMMuB,EAAW5B,IACb,GAAGO,EAAMgB,KAAK,CACV,IAAIM,EAAItB,EAAMgB,KAAKO,WAAUC,GAAQA,EAAK/B,KAAOA,IACjD,OAAI6B,GAAK,EACEtB,EAAMgB,KAAKM,GAEX,IAEf,CACI,OAAO,IACX,EAGEpC,EAAUwC,IACZ,GAAIA,GAAQA,EAAKxC,QAAUwC,EAAKxC,OAAOyD,SAAU,CAC7C,IAAInB,EAMJ,OAJIA,EADAE,EAAKxC,OAAOa,WAAavC,EAAcE,KAChC2D,EAAQK,EAAKE,eAAiBzK,EAAU6J,KAAKvB,GAAKiC,EAAKQ,cAAgBR,EAAKE,cAE5EP,EAAQK,EAAKxC,OAAO6B,UAE3BS,EACQ9K,cAAA,OAAAE,SACJF,cAACuI,EAAI,CACDzI,KAAMgL,EAAK3J,UACXqH,OAAQwC,EAAKxC,OACbC,UAAU,EACVC,cAAc,6BACdC,UAAU,qBAIX3I,cAAA,OAAKM,MAAO,CAAE4L,OAAQ,SAGrC,CACI,OAAOlM,cAAA,OAAKM,MAAO,CAAE4L,OAAQ,SACjC,EA+BJ,OACI/L,eAAA,OAAAD,SAAA,CACIF,cAAA,OAAKC,UAAU,yBAAwBC,SACnCF,cAAA,SAAOC,UAAU,+BAA+BkM,YAAY,cAAc/L,KAAK,WAInFJ,cAAA,OAAKC,UAAU,kBAAkB8I,GAAG,QAAO7I,SACtCkJ,GAASA,EAAMkB,KACXlB,EAAMkB,KAAKyB,KAAI,CAACyD,EAAKvE,IAClBuE,EAAI/E,OAzBJkF,EAACH,EAAKvE,IACd9K,eAAA,OAAkB4I,GAAIkC,EAAOhL,UAAU,yBAAyBU,QAASf,IAAO0P,EAAaE,EAAK1I,EAAcE,KAAK,EAAG9G,SAAA,CAC3HqP,EAAWC,GAAKjE,UACXvL,cAAA,OAAKyL,IAAK8D,EAAWC,GAAKjE,UAAWG,IAAI,SAASzL,UAAU,6BAC5DD,cAAA,QAAMC,UAAU,iBAAiBK,MAAO,CAAEsP,WAAY,UAC5DzP,eAAA,OAAKF,UAAWsP,EAAWC,GAAKjE,UAAY,oCAAsC,mCAAmCrL,SAAA,CAAmBqP,EAAWC,GAAKrO,UAAU,MAAvCqO,EAAI/E,QAC/HzK,cAAA,OAAKC,UAAU,2BAA0BC,SAAEoI,EAAuBkH,EAAIK,iBACpEL,EAAIhH,QAAUgH,EAAIhH,OAAOyD,SACzBzD,EAAOgH,GACPxP,cAAA,OAAMC,UAAU,sBAAqBC,SAAEyK,EAAQ6E,EAAIM,mBAAmB3O,UAAY,KAAOqO,EAAIO,cAE/F/P,cAAA,OAAKC,UAAU,sBAAqBC,SAChCF,cAAA,QAAMM,MAAO,CAAC0P,UAAW,SAAShB,QAAS,OAAO9O,SAAC,UAXzC+K,GAyBI0E,CAAYH,EAAKvE,GAxCtBgF,EAACT,EAAKvE,IACf9K,eAAA,OAAiB4I,GAAIkC,EAAOhL,UAAU,yBAAyBU,QAASf,IAAO0P,EAAaE,EAAK1I,EAAcC,MAAM,EAAG7G,SAAA,CAC3HsP,EAAIjE,WAA+B,OAAlBiE,EAAIjE,UAChBvL,cAAA,OAAKyL,IAAK+D,EAAIjE,UAAWG,IAAI,SAASzL,UAAU,6BAChDD,cAAA,QAAMC,UAAU,yBACtBE,eAAA,OAAKF,UAAU,mCAAkCC,SAAA,CAAsB,IAAEsP,EAAI7D,aAAa,MAAnC6D,EAAI9E,YAC3D1K,cAAA,OAAKC,UAAU,2BAA0BC,SAAEoI,EAAuBkH,EAAIK,iBACpEL,EAAIhH,QAAUgH,EAAIhH,OAAOyD,SACzBzD,EAAOgH,GACPxP,cAAA,OAAKC,UAAU,sBAAqBC,SAAEsP,EAAIM,kBAAqBnF,EAAQ6E,EAAIM,mBAAmB3O,UAAY,KAAOqO,EAAIO,YAAe,KAEtI/P,cAAA,OAAKC,UAAWuP,EAAIM,kBAAoB,sBAAwB,wBAAwB5P,SAAC,SAV3E+K,GAwCIgF,CAAaT,EAAKvE,KAE1B,SASR,E,MC1HCiF,MAfG7Q,IACd,MAAM,aAAE8Q,GAAiB9Q,EAIzB,OACIW,cAAA,OAAKC,UAAU,qBAAoBC,SAE3BiQ,EAAapE,KAAI,CAACqE,EAAKnF,IACnB9K,eAAA,OAAKF,UAAU,uBAAmCU,QAASf,GAPrDwQ,KAClB/Q,EAAMgR,aAAaD,EAAK,EAMkDC,CAAaD,GAAMlQ,SAAA,CAAC,IAAEkQ,EAAK,MAA9CnF,MAGjD,ECJd,MAAMqD,EAAU,CAAC,YAAa,eAAgB,WAAW,UAmH1CgC,MAlHWjR,IAEtB,MAAM,QAAE6J,EAAO,cAAEC,EAAa,UAAE1I,EAAS,MAAE2I,EAAK,MAAEE,GAAUjK,GACrDkR,EAAaC,GAAkBhR,oBAAS,IACxCiR,EAAaC,GAAkBlR,oBAAS,IACxCmR,EAAeC,GAAoBpR,oBAAS,GAClCoJ,cACjBC,qBAAU,KACNhI,QAAQC,IAAI,UAAWoI,GACvBrI,QAAQC,IAAI,gBAAiBqI,EAAc,IAK/C,MAUM4D,EAAkBA,KACpByD,GAAe,GACfI,GAAiB,GACjBF,GAAe,EAAM,EA+BzB,OAEIvQ,eAAA,OAAKF,UAAU,sBAAqBC,SAAA,CAChCC,eAAA,OAAKF,UAAU,gBAAeC,SAAA,CAC1BC,eAAA,OAAKF,UAAU,yBAAwBC,SAAA,CAClCO,EAAU6J,KAAKiB,UACVvL,cAAA,OAAKyL,IAAKhL,EAAU6J,KAAKiB,UAAWG,IAAI,SAASzL,UAAU,6BAC3DD,cAAA,QAAMC,UAAU,mBACtBD,cAAA,QAAMC,UAAWQ,EAAU6J,KAAKiB,UAAY,mCAAqC,oCAAoCrL,SAAEO,EAAU6J,KAAKnJ,eAE1IhB,eAAA,OAAKF,UAAU,oBAAmBC,SAAA,CAC9BF,cAAA,KAAGC,UAAU,yBAAyBU,QApD9BkQ,KACpBL,GAAeM,IAAQA,GAAK,EAmD+C5Q,SAAC,QAC/DqQ,EACKvQ,cAACkQ,EAAQ,CACPG,aAhCFD,IAClBvP,QAAQC,IAAIsP,GACZI,GAAe,GACF,iBAATJ,EACAM,GAAe,GACA,cAATN,EACNQ,GAAiB,GACD,WAATR,GACPW,OAAOC,SAASC,QACpB,EAwBoBd,aAAc7B,IACb,SAIhBmC,EACGzQ,cAACuO,EAAe,CACZjF,MAAOA,EACPyF,kBAnDWP,IACvB3N,QAAQC,IAAI0N,GACZkC,GAAe,GACfrR,EAAM0P,kBAAkBP,EAAU,EAiDtB/N,UAAWA,EACXiO,oBAhDYA,KACxBgC,GAAe,GACfE,GAAiB,GACjBJ,GAAe,EAAM,IAgDZG,EACD3Q,cAAA,OAAAE,SACIF,cAAA,OAAKC,UAAU,aAAYC,SAC3BF,cAAC6M,EAAc,CACXC,UAtCDhC,IACfjK,QAAQC,IAAIgK,GACZzL,EAAMyN,UAAUhC,GAChBiC,GAAiB,EAoCDtM,UAAWA,EACX6I,MAAOA,EACPyD,gBAAmBA,QAKxB/M,cAAA,OAAKW,QA9EUuQ,KAC1BV,GAAe,EAAM,EA6E0BtQ,SACnCF,cAACiP,EAAgB,CACbxO,UAAWA,EACX2I,MAAOA,EACP+H,OAAQ/H,EACRF,QAASA,EACTC,cAAeA,EACfmG,aA3FCA,CAAC8B,EAAShR,KAC3Bf,EAAMiQ,aAAa8B,EAAShR,EAAK,EA2FjBkJ,MAAOA,QAIjB,EC5GV+H,EAAc,KAoMHC,MAnMQjS,IACnB,MAAM,UAAEoB,GAAcpB,GAEf8J,EAAeoI,GAAoB/R,mBAAS,CAAC,IAC7C0J,EAASsI,GAAchS,mBAAS,CAAC,IACjC6J,EAAUoI,GAAejS,mBAAS,IAEnC2F,EAAWyD,cACjB8I,2BAAgB,KACZvM,EAASgB,IAAc,GACxB,CAAChB,IACJ0D,qBAAU,KACN1D,EAASmB,EAAY7F,EAAU6J,KAAKvB,KACpC5D,EAASqB,EAAwB/F,EAAU6J,KAAKvB,IAAI,GACrD,CAAC5D,EAAU1E,EAAU6J,KAAKvB,KAE7BF,qBAAU,KACa,MAAfwI,GACAM,GACJ,IAKJ,MAAMrI,EAAQhI,aAAaC,GAAUA,EAAM+H,QAE3CzI,QAAQC,IAAI,QAASwI,GACrB,MAAMF,EAAQ9H,aAAYC,GAASA,EAAM6H,QAmDnCuI,EAAUA,KACZ,MAAMC,EAAQC,EAAQ,IACtB,IAAIC,EAASD,EAAQ,IAErBC,EAAS,IAAIA,EAD4B,0BAA3Bf,OAAOC,SAASe,OAAqC,2BAA6BhB,OAAOC,SAASe,OAAS,QAEzHV,EAAcO,EAAMI,KAAKF,IACbH,QAAQ,CAAC,EAAGM,EAAaC,EAAQ,EAG3CD,EAAcA,KAChBpR,QAAQC,IAAI,aACZuQ,EAAYc,UACR,SAAW1R,EAAU6J,KAAKvB,GAAK,kBAC/BqJ,EACH,EAGCF,EAAWnM,IACblF,QAAQC,IAAIiF,EAAI,EAGdqM,EAAqBhI,IACvB,MAAMiI,EAAe7M,KAAK8M,MAAMlI,EAAI7E,MjBnCrC,IAA4B3B,EiBoC3B/C,QAAQC,IAAI,mBAAoBuR,GAC7BvL,EAAcE,OAASqL,EAAaE,YACnCpN,EAASxB,EAAkB0O,EAAa3R,QAAQ,KAC3CoG,EAAcC,QAAUsL,EAAaE,YAC1CpN,GjBxCuBvB,EiBwCKyO,EAAa3R,QAAQ,GjBvClD,CACHN,KAAM0B,EAAewB,8BACrBM,eiBsCSkD,EAAcG,mBAAqBoL,EAAaE,aAEhDzL,EAAcI,yBAA2BmL,EAAaE,cAD3DpN,EAASlB,EAAeoO,EAAa3R,SAGzC,EA0CJ,OAEIV,cAAA,OAAKC,UAAU,iBAAgBC,SAC3BC,eAAA,OAAKF,UAAU,WAAUC,SAAA,CACrBF,cAAA,OAAKC,UAAU,YAAWC,SACtBF,cAACsQ,EAAgB,CACbpH,QAASA,EACTC,cAAeA,EACf1I,UAAWA,EACX2I,MAAOA,EACPkG,aAhHCA,CAAC8B,EAAQhR,KAC1BS,QAAQC,IAAIsQ,GACZ,IAAIpG,EAAO,KACX,GAAIlE,EAAcE,OAAS5G,GAMvB,GALIK,EAAU6J,KAAKvB,KAAOqI,EAAQ3B,YAAY1G,GAC1CwI,EAAiB,IAAKH,EAAQ1B,aAE9B6B,EAAiB,IAAKH,EAAQ3B,cAE9BrG,GAASA,EAAMkB,KAAM,CACrB,MAAMM,EAAIxB,EAAMkB,KAAKO,WAAUG,GAC3BA,EAAK0E,aAAe1E,EAAK0E,WAAW3G,KAAOtI,EAAU6J,KAAKvB,IAAMiC,EAAK0E,WAAW3G,KAAOqI,EAAQ1B,WAAW3G,KAAOiC,EAAKyE,cAAgBzE,EAAKyE,YAAY1G,KAAOqI,EAAQ3B,YAAY1G,IAAMiC,EAAKyE,YAAY1G,KAAOtI,EAAU6J,KAAKvB,MAC/N6B,GAAK,IACLI,EAAO5B,EAAMkB,KAAKM,GAE1B,OAEA,GAAIxB,GAASA,EAAMkB,KAAM,CACrB,MAAMM,EAAIxB,EAAMkB,KAAKO,WAAUG,GAAQA,EAAKN,aAAe0G,EAAQ1G,aAC/DE,GAAK,IACLI,EAAO5B,EAAMkB,KAAKM,GAE1B,CAEJ4G,EAAW,IAAKxG,IAChByG,EAAYrR,EAAK,EAwFDkJ,MAAOA,EACPyF,kBAhBOP,IACvBrJ,EAASyB,EAAe4H,GAAW,EAgBnB1B,UAxIDhC,IACfjK,QAAQC,IAAIgK,GACZyG,EAAiB,IACVzG,IAEP,IAAIE,EAAO,KACX,GAAI5B,GAASA,EAAMkB,KAAM,CACrB,MAAMM,EAAIxB,EAAMkB,KAAKO,WAAUG,IAASA,EAAKE,eAAiBzK,EAAU6J,KAAKvB,IAAMiC,EAAKE,eAAiBJ,EAAK/B,MAAQiC,EAAKQ,gBAAkBV,EAAK/B,IAAMiC,EAAKQ,gBAAkB/K,EAAU6J,KAAKvB,MAE1LiC,EADAJ,GAAK,EACExB,EAAMkB,KAAKM,GAEX,KAEX/J,QAAQC,IAAIkK,EAChB,CACAwG,EAAW,IACJxG,IAEPyG,EAAY3K,EAAcE,KAAK,MAyHvBhH,cAAA,OAAKC,UAAU,cAAaC,SACxBF,cAACiJ,EAAY,CACTC,QAASA,EACTC,cAAeA,EACf1I,UAAWA,EACXyJ,YA3DAA,CAACE,EAAIhK,KbxDtB,IAAwB8E,Ea0DpB9E,IAAS0G,EAAcE,KACtB7B,Gb3DmBD,Ea2DKkF,Eb1DzBjF,GACIC,MAAMd,EAAII,SAAU,CACvBW,QAAS,CACL,eAAgB,oBAEpBC,OAAQ,OACRC,KAAMC,KAAKC,UAAUP,KACtBQ,MAAK9B,GACGA,EAAS+B,SACjBD,MAAK9B,IACJ/C,QAAQC,IAAI8C,GACRA,GAAoC,IAAxBA,EAASgC,WACrBT,EAASxB,EAAkBC,EAASsC,OAAO,KAE3Cf,EAAStB,EAAkBD,EAASyC,aACxC,IACDP,OAAMC,IACLlF,QAAQC,IAAIiF,GACZZ,EAAStB,EAAkB,gBAAgB,Ma0C3CsB,EAASuB,EAAoB0D,IAGjCvJ,QAAQC,IAAI,4BAA6B0E,KAAKC,UAAU2E,GAAK,EAoD7ChB,MA9CGoJ,MACnB,GAAIpJ,GAASA,EAAMkB,MAAQlB,EAAMkB,KAAKwB,OAAQ,CAC1C,IAAIlB,GAAK,EAOT,OALIA,EADDvB,IAAavC,EAAcE,KACtBoC,EAAMkB,KAAKO,WAAUG,GAAUA,EAAKP,QAAUO,EAAKP,SAAWvB,EAAQuB,QAAWO,EAAKQ,gBAAkBrC,EAAcJ,KAEtHK,EAAMkB,KAAKO,WAAUG,GAAQA,EAAKN,aAAexB,EAAQwB,eAGxD,EACEtB,EAAMkB,KAAKM,GACW,IAAtBxB,EAAMkB,KAAKwB,SAAiB5C,EAAQuB,QAAUvB,EAAQwB,YACtDtB,EAAMkB,KAAK,GAEX,IAEf,CACI,OAAO,IACX,EA4BuBkI,GACPnJ,SAAUA,EACVC,MAAOA,EACPiD,uBArDYrH,IAC5BC,EboGD,SAAmCD,GACtC,OAAOC,GACIC,MAAMd,EAAIU,oBAAoB,CACjCK,QAAQ,CACA,eAAgB,oBAExBC,OAAQ,OACRC,KAAMC,KAAKC,UAAUP,KACtBQ,MAAK9B,GACGA,EAAS+B,SACjBD,MAAK9B,IACJ/C,QAAQC,IAAI8C,EAAS,IAItBkC,OAAMC,IACLlF,QAAQC,IAAIiF,EAAI,GAG5B,CavHiB0M,CAA0BvN,GAAS,UAgEtC,E,MClMd,MAAMwN,UAAsBxF,IAAMC,UAC9BC,YAAY/N,GACRgO,MAAMhO,GAAO,KAkCjBsT,aAAgB/S,MAjCZ0N,KAAK/L,MAAQ,CACTqR,UAAU,GAEdtF,KAAK1L,cAAgB0L,KAAK1L,cAAc6L,KAAKH,MAC7CA,KAAKvM,OAASuM,KAAKvM,OAAO0M,KAAKH,MAC/BA,KAAKzL,UAAYyL,KAAKzL,UAAU4L,KAAKH,KACzC,CAEA1L,cAAcsD,GACVrE,QAAQC,IAAIoE,GACZoI,KAAKjO,MAAMmC,OAAO0D,GACjBQ,MAAK,KACF7E,QAAQC,IAAIwM,KAAKjO,MAAMgC,YACnBiM,KAAKjO,MAAMgC,aAAeiM,KAAKjO,MAAMgC,WAAWI,QAChDqH,YAAW,IAAMwE,KAAKI,SAAS,CAAEkF,UAAU,KAAS,KAEpDtF,KAAKI,SAAS,CACVkF,UAAU,GAEjB,GAGT,CACA7R,OAAOmE,GACHrE,QAAQC,IAAIoE,GACZoI,KAAKjO,MAAM0B,OAAOmE,EAEtB,CACArD,YACIyL,KAAKI,SAAS,CACVkF,UAAU,GAElB,CAMA/E,SACI,OACI1N,eAAA,OAAAD,SAAA,CACKW,QAAQC,IAAI,eAAewM,KAAKjO,MAAMoB,WACtC6M,KAAKjO,MAAMoB,YAAc6M,KAAKjO,MAAMoB,UAAUoS,QAC3C7S,cAAA,OAAKC,UAAU,iBAAgBC,SAC3BC,eAAA,OAAKF,UAAU,uBAAsBC,SAAA,CAGjCF,cAAA,OAAKC,UAAU,oBAAmBC,SAC9BF,cAAA,QAAAE,SAAM,kCAERoN,KAAK/L,MAAMqR,SACTzS,eAAA,OAAAD,SAAA,CACIF,cAACZ,EAAK,CAAC2B,OAAQuM,KAAKvM,OACpBN,UAAW6M,KAAKjO,MAAMoB,YACtBT,cAAA,UAAQC,UAAU,0BAA0BU,QAASf,IAAO0N,KAAKI,SAAS,CAAEkF,UAAU,GAAQ,EAAG1S,SAAC,uBAGtGF,cAACgB,EAAM,CAACY,cAAe0L,KAAK1L,cAAeC,UAAWyL,KAAKzL,iBAMrE7B,cAACsR,EAAa,CACZ7Q,UAAW6M,KAAKjO,MAAMoB,cAK1C,EAkBWkR,mBAhBf,SAAyBpQ,GACrB,MAAO,CACHd,UAAWc,EAAMd,UACjBY,WAAYE,EAAMC,OAE1B,IACA,SAA4B2D,GACxB,MAAO,CACHA,WACApE,OAASmE,GAAYC,EAASa,EAAUd,IACxC1D,OAAS0D,GAAYC,EAASF,EAAUC,IAIhD,GAE4D,KAAM,CAAE4N,MAAM,GAA3DnB,CAAoEe,GC9FnF,MAAMK,UAAY7F,IAAMC,UAGtBU,SACE,OACE7N,cAAA,OAAAE,SACEF,cAAC0S,EAAa,KAGpB,EAGaK,Q,gBCsGR,SAASC,GAAWC,EAAOjI,GAC9B,GAAIiI,GAASA,EAAMnH,OAAQ,CACvB,MAAMlB,EAAIqI,EAAMpI,WAAUqI,GAASA,EAAMzI,SAAWO,EAAKP,SAMzD,OALIG,GAAK,EACLqI,EAAMrI,GAAGiB,aAAaqC,KAAKlD,EAAKa,aAAa,IAE7CoH,EAAM/E,KAAKlD,GAERiI,CACX,CACI,MAAO,CAACjI,EAEhB,CAEO,SAASmI,GAAgBF,EAAOjI,GACnC,GAAIiI,GAASA,EAAMnH,OAAQ,CACvB,MAAMlB,EAAIqI,EAAMpI,WAAUqI,GAASA,EAAMxI,aAAeM,EAAKN,aAM7D,OALIE,GAAK,EACLqI,EAAMrI,GAAGiB,aAAaqC,KAAKlD,EAAKa,aAAa,IAE7CoH,EAAM/E,KAAKlD,GAERiI,CACX,CACI,MAAO,CAACjI,EAEhB,CAEO,SAASoI,GAAuBhK,EAAMiK,GACzC,OAAGjK,GAASA,EAAM0C,OACC1C,EAAMnB,OAAOoL,GAGrB,CAACA,EAEhB,CACO,SAASC,GAAuBL,EAAMM,GACzC,GAAGA,EAAYlK,WAAavC,EAAcE,KAAK,CAC3C,MAAM4D,EAAIqI,EAAMpI,WAAUqI,GAASA,EAAMzI,SAAW8I,EAAYxK,KAShE,OARI6B,GAAK,IACLqI,EAAMrI,GAAK,IACJqI,EAAMrI,GACTpC,OAAO,IACD+K,EAAYtH,UAAS,KAI5BgH,CACX,CAAK,CACD,MAAMrI,EAAIqI,EAAMpI,WAAUqI,GAASA,EAAMxI,aAAe8I,SAASD,EAAYxK,MAS7E,OARI6B,GAAK,IACLqI,EAAMrI,GAAK,IACJqI,EAAMrI,GACTpC,OAAO,IACD+K,EAAYtH,UAAS,KAI5BgH,CACX,CACJ,CAEO,SAASQ,GAAsBR,EAAMM,GACxC,GAAGA,EAAYlK,WAAavC,EAAcE,KAAK,CAC3C,MAAM4D,EAAIqI,EAAMpI,WAAUqI,GAASA,EAAMzI,SAAW8I,EAAYxK,KAShE,OARI6B,GAAK,IACLqI,EAAMrI,GAAK,IACJqI,EAAMrI,GACTpC,OAAO,IACA+K,EAAYtH,UAAS,KAI7BgH,CACX,CAAK,CACD,MAAMrI,EAAIqI,EAAMpI,WAAUqI,GAASA,EAAMxI,aAAe8I,SAASD,EAAYxK,MAS7E,OARI6B,GAAK,IACLqI,EAAMrI,GAAK,IACJqI,EAAMrI,GACTpC,OAAO,IACA+K,EAAYtH,UAAS,KAI7BgH,CACX,CACJ,CAEO,SAASS,GAAUtK,GACtB,GAAGA,GAASA,EAAM0C,OAAO,CACrB,IAAI,IAAIlB,EAAE,EAAEA,EAAExB,EAAM0C,OAAOlB,IACpBxB,EAAMwB,GAAGiB,eACRzC,EAAMwB,GAAGiB,aAAezC,EAAMwB,GAAGiB,aAAa8H,MAAK,CAACC,EAAEC,IAAM,IAAIvM,KAAKuM,EAAEzI,kBAAoB,IAAI9D,KAAKsM,EAAExI,oBACtGhC,EAAMwB,GAAK,IACNxB,EAAMwB,GACT,cAAiBxB,EAAMwB,GAAGiB,aAAaC,OAAS1C,EAAMwB,GAAGiB,aAAa,GAAGT,iBAAmBhC,EAAMwB,GAAGkJ,iBACrG,YAAe1K,EAAMwB,GAAGiB,aAAaC,OAAS1C,EAAMwB,GAAGiB,aAAa,GAAGnL,QAAU,GACjF,kBAAqB0I,EAAMwB,GAAGiB,aAAaC,OAAS1C,EAAMwB,GAAGiB,aAAa,GAAGX,aAAe,IAE9F9B,EAAMwB,GAAGiB,aAAezC,EAAMwB,GAAGiB,aAAa8H,MAAK,CAACC,EAAEC,IAAM,IAAIvM,KAAKsM,EAAExI,kBAAoB,IAAI9D,KAAKuM,EAAEzI,qBAI5GhC,EAAQA,EAAMuK,MAAK,CAACC,EAAEC,IAAK,IAAIvM,KAAKuM,EAAEhE,eAAiB,IAAIvI,KAAKsM,EAAE/D,gBACxE,CACA,OAAOzG,CAEX,CC3NA,MAAM2K,GAAcC,YAAgB,CAChCvT,UCLG,WAA2C,IAArBc,EAAK0S,UAAAnI,OAAA,QAAAoI,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAGE,EAAMF,UAAAnI,OAAA,EAAAmI,UAAA,QAAAC,EAC3C,OAAQC,EAAO/T,MACX,KAAK0B,EAAeC,cAChB,MAAO,IACAR,EACHsR,SAAS,EACTvI,KAAM,KACN8J,UAAW,KACX1T,QAAS,MAGjB,KAAKoB,EAAeE,cAChB,MAAO,IACAT,EACHsR,SAAS,EACTvI,KAAM6J,EAAOvQ,SACblD,QAAS,MAGjB,KAAKoB,EAAeG,aAChB,MAAO,IACAV,EACHsR,SAAS,EACTvI,KAAM6J,EAAOvQ,SACblD,QAAQyT,EAAOvQ,SAASyC,aAGhC,QACI,OAAO9E,EAKnB,ED3BI+H,MENG,WAA2C,IAArB/H,EAAK0S,UAAAnI,OAAA,QAAAoI,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAGE,EAAMF,UAAAnI,OAAA,EAAAmI,UAAA,QAAAC,EAC3C,OAAQC,EAAO/T,MACX,KAAK0B,EAAeO,oBAChB,MAAO,IACAd,EACH8S,WAAW,EACX5S,SAAS,EACT6I,KAAM,MAGd,KAAKxI,EAAeQ,oBAChB,MAAO,IACAf,EACH8S,WAAW,EACX5S,SAAS,EACT6I,KAAM6J,EAAOvQ,UAGrB,KAAK9B,EAAeS,mBAChB,MAAO,IACAhB,EACH8S,WAAW,EACX5S,SAAS,EACT6I,KAAM,KACN5J,QAAQyT,EAAOG,eAGvB,QACI,OAAO/S,EAKnB,EF1BIsK,aGPG,WAAkD,IAArBtK,EAAK0S,UAAAnI,OAAA,QAAAoI,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAGE,EAAMF,UAAAnI,OAAA,EAAAmI,UAAA,QAAAC,EAClD,OAAQC,EAAO/T,MACX,KAAK0B,EAAeU,wBAChB,MAAO,IACAjB,EACH8S,WAAW,EACX5S,SAAS,EACT6I,KAAM,MAGd,KAAKxI,EAAeW,wBAChB,MAAO,IACAlB,EACH8S,WAAW,EACX5S,SAAS,EACT6I,KAAM6J,EAAOvQ,UAGrB,KAAK9B,EAAeY,uBAChB,MAAO,IACAnB,EACH8S,WAAW,EACX5S,SAAS,EACT6I,KAAM,KACN5J,QAAQyT,EAAOG,eAGvB,QACI,OAAO/S,EAKnB,EHzBI6H,MDPG,WAAgD,IAArB7H,EAAK0S,UAAAnI,OAAA,QAAAoI,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAGE,EAAMF,UAAAnI,OAAA,EAAAmI,UAAA,QAAAC,EAChD,OAAQC,EAAO/T,MACX,KAAK0B,EAAea,oBAChB,MAAO,IACApB,EACH8S,WAAW,EACX5S,SAAS,EACT6I,KAAM,IAGd,KAAKxI,EAAec,oBAChB,MAAO,IACArB,EACH8S,WAAW,EACX5S,SAAS,EACT6I,KAAMoJ,GAAUS,EAAOvQ,WAG/B,KAAK9B,EAAee,mBAChB,MAAO,IACAtB,EACH8S,WAAW,EACX5S,SAAS,EACT6I,KAAM,GACN5J,QAASyT,EAAOG,eAGxB,KAAKxS,EAAegB,iBAChB,MAAO,IACAvB,EACH8S,WAAW,EACX5S,SAAS,EACT6I,KAAMoJ,GAAUV,GAAWzR,EAAM+I,KAAK6J,EAAOvQ,YAGrD,KAAK9B,EAAeiB,gBAChB,MAAO,IACAxB,EACH8S,WAAW,EACX5S,SAAS,EACTf,QAASyT,EAAOG,eAGxB,KAAKxS,EAAekB,uBAChB,MAAO,IACAzB,EACH8S,WAAW,EACX5S,SAAS,EACT6I,KAAMoJ,GAAUP,GAAgB5R,EAAM+I,KAAK6J,EAAOvQ,YAG1D,KAAK9B,EAAemB,sBAChB,MAAO,IACA1B,EACH8S,WAAW,EACX5S,SAAS,EACTf,QAASyT,EAAOG,eAGxB,KAAKxS,EAAeoB,0BAChB,MAAO,IACA3B,EACH8S,WAAW,EACX5S,SAAS,EACT6I,KAAMoJ,GAAUN,GAAuB7R,EAAM+I,KAAK6J,EAAOvQ,YAGjE,KAAK9B,EAAeqB,yBAChB,MAAO,IACA5B,EACH8S,WAAW,EACX5S,SAAS,EACTf,QAASyT,EAAOG,eAEvB,KAAKxS,EAAesB,qBACjB,MAAO,IACA7B,EACH8S,WAAW,EACX5S,SAAS,EACT6I,KAAMoJ,GAAUN,GAAuB7R,EAAM+I,KAAK6J,EAAOvQ,YAGjE,KAAK9B,EAAeuB,oBAChB,MAAO,IACA9B,EACH8S,WAAW,EACX5S,SAAS,EACTf,QAASyT,EAAOG,eAGxB,KAAKxS,EAAewB,8BAChB,MAAO,IACA/B,EACH8S,WAAW,EACX5S,SAAS,EACT6I,KAAMoJ,GAAUP,GAAgB5R,EAAM+I,KAAK6J,EAAOvQ,YAG1D,KAAK9B,EAAeyB,2BAChB,MAAM,IACChC,EACH+I,KAAMgJ,GAAuB/R,EAAM+I,KAAK6J,EAAOvQ,WAGvD,KAAK9B,EAAe0B,yBAChB,MAAM,IACCjC,EACH+I,KAAMmJ,GAAsBlS,EAAM+I,KAAK6J,EAAOvQ,WAGtD,QACI,OAAOrC,EAEnB,ECzGIC,OITG,WAA4C,IAArBD,EAAK0S,UAAAnI,OAAA,QAAAoI,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAGE,EAAMF,UAAAnI,OAAA,EAAAmI,UAAA,QAAAC,EAC5C,OAAQC,EAAO/T,MACX,KAAK0B,EAAeI,eAChB,MAAO,IACAX,EACH8S,WAAW,EACX5S,SAAS,EACT6I,KAAM,KACN5J,QAAQ,KACRkF,WAAY,MAGpB,KAAK9D,EAAeK,eAChB,MAAO,IACAZ,EACH8S,WAAW,EACX5S,SAAS,EACT6I,KAAM6J,EAAOvQ,SAASsC,OAAO,GAC7BxF,QAAQyT,EAAOvQ,SAASyC,YACxBT,WAAYuO,EAAOvQ,SAASgC,YAGpC,KAAK9D,EAAeM,cAChB,MAAO,IACAb,EACH8S,WAAW,EACX5S,SAAS,EACT6I,KAAM,KACN5J,QAAQyT,EAAOvQ,SAASyC,YACxBT,WAAYuO,EAAOvQ,SAASgC,YAGpC,QACI,OAAOrE,EAKnB,IJ1BewS,U,gBKTf,MAAMQ,GAAa,CAACC,MAWLC,OALEC,YAChBX,GACA,CAAC,EACDY,eAAmBJ,KCNpBK,IAAS/G,OACP7N,cAAC6U,IAAQ,CAACC,MAAOL,GAASvU,SACxBF,cAAC+S,EAAG,MAENgC,SAASC,eAAe,Q","file":"static/js/main.1473e88a.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport ThirdParty from '../ThirdParty/ThirdParty';\nimport './Login.css';\n\nfunction Login(props) {\n\n    const [loginForm, setLoginForm] = useState({ password: '', userId: '' });\n\n\n    const login = () => {\n        console.log(loginForm);\n        props.signIn(loginForm);\n    }\n\n    const handleInputChange = e => {\n        setLoginForm({\n            ...loginForm,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    return (\n        <div className=\"login-container\">\n            <div className=\"login-form\">\n                <div className=\"mb-3\">\n                    <label className=\"form-label\">User Id</label>\n                    <input type=\"email\" className=\"form-control c-sign-in-user-id\" name=\"userId\" onChange={handleInputChange} />\n                </div>\n                <div className=\"mb-3\">\n                    <label className=\"form-label\">Password</label>\n                    <input type=\"password\" className=\"form-control c-sign-in-psw\" name=\"password\" onChange={handleInputChange} />\n                </div>\n                <div style={{paddingBottom: '10px',color:'red'}} ><span>{props.loginInfo.message}</span></div>\n                \n                <button type=\"submit\" className=\"btn btn-primary c-btn-sign-in\" onClick={login}>Login</button>\n            </div>\n\n            {/* <ThirdParty\n                submitRequest={login}\n            /> */}\n\n        </div>\n    )\n\n}\nexport default Login;","import { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport ThirdParty from \"../ThirdParty/ThirdParty\";\nimport \"./SignUp.css\";\n\nconst SignUp = (props) => {\n\n    const [signupForm, setSignupForm] = useState({ userId: '', password: '', firstName: '', lastName: '' })\n\n    const signUpData = useSelector(state => state.signUp);\n    const handleInputChange = e => {\n        setSignupForm({\n            ...signupForm,\n            [e.target.name]: e.target.value\n        })\n    }\n    const createAccount = () => {\n        props.createAccount(signupForm);\n    }\n    const gotoLogin = () =>{\n        console.log(\"sign up\");\n        props.gotoLogin();\n    }\n\n    return (\n        <div className=\"signup-container\">\n            {console.log(\"signUpData\",signUpData)}\n            <div className=\"signup-form\">\n            <div className={!signUpData.isError ? 'c-success':'c-error'}>{signUpData.message}</div>\n                <div className=\"mb-3\">\n                    <label className=\"form-label\">User Id</label>\n                    <input type=\"email\" className=\"form-control\" name=\"userId\" onChange={handleInputChange} />\n                </div>\n                <div className=\"mb-3\">\n                    <label className=\"form-label\">Password</label>\n                    <input type=\"password\" className=\"form-control\" name=\"password\" onChange={handleInputChange} />\n                </div>\n                <div className=\"mb-3\" style={{ display: \"table\" }}>\n                    <div style={{ display: \"table-row\" }}>\n                        <div style={{ display: \" table-cell\" }}>\n                            <label className=\"form-label\">First Name</label>\n                            <input type=\"email\" className=\"form-control\" name=\"firstName\" onChange={handleInputChange} />\n                        </div>\n                        <div style={{ display: \" table-cell\" }}>\n                            <label className=\"form-label\">Last Name</label>\n                            <input type=\"email\" className=\"form-control\" name=\"lastName\" onChange={handleInputChange} />\n                        </div>\n                    </div>\n                </div>\n                <div></div>\n                <div><button type=\"submit\" className=\"btn btn-success\" style={{float:'right'}}  onClick={createAccount}>Create Account</button></div>\n                <div><button type=\"submit\" className=\"btn btn-info\" onClick={gotoLogin}>Go to Login!</button></div>\n                \n            </div>\n            {/* <ThirdParty\n                submitRequest={signupForm}\n            /> */}\n        </div>\n    )\n\n}\nexport default SignUp;","export const StoreConstants = {\n    LOGIN_LOADING: 'lOGIN_LOADING',\n    LOGIN_SUCCESS: 'lOGIN_SUCCESS',\n    LOGIN_FAILED: 'LOGIN_FAILED',\n    SIGNUP_LOADING: 'SIGNUP_LOADING',\n    SIGNUP_SUCCESS: 'SIGNUP_SUCCESS',\n    SIGNUP_FAILED: 'SIGNUP_FAILED',\n    FETCH_USERS_LOADING: 'FETCH_USERS_LOADING',\n    FETCH_USERS_SUCCESS: 'FETCH_USERS_SUCCESS',\n    FETCH_USERS_FAILED: 'FETCH_USERS_FAILED',\n    FETCH_CHAT_MSGS_LOADING: 'FETCH_CHAT_MSGS_LOADING',\n    FETCH_CHAT_MSGS_SUCCESS: 'FETCH_CHAT_MSGS_SUCCESS',\n    FETCH_CHAT_MSGS_FAILED: 'FETCH_CHAT_MSGS_FAILED',\n    FETCH_CHATS_LOADING: 'FETCH_CHAT_MSGS_LOADING',\n    FETCH_CHATS_SUCCESS: 'FETCH_CHAT_MSGS_SUCCESS',\n    FETCH_CHATS_FAILED: 'FETCH_CHAT_MSGS_FAILED',\n    MSG_SEND_SUCCESS: 'MSG_SEND_SUCCESS',\n    MSG_SEND_FAILED: 'MSG_SEND_FAILED',\n    GROUP_MSG_SEND_SUCCESS: 'GROUP_MSG_SEND_SUCCESS',\n    GROUP_MSG_SEND_FAILED: 'GROUP_MSG_SEND_FAILED',\n    FETCH_GROUP_CHATS_SUCCESS: 'FETCH_GROUP_CHATS_SUCCESS',\n    FETCH_GROUP_CHATS_FAILED: 'FETCH_GROUP_CHATS_FAILED',\n    CREATE_GROUP_SUCCESS: 'CREATE_GROUP_SUCCESS',\n    CREATE_GROUP_FAILED: 'CREATE_GROUP_FAILED',\n    RECIVE_GROUP_CHAT_MSG_SUCCESS: 'RECIVE_GROUP_CHAT_MSG_SUCCESS',\n    RECIVE_CHAT_MESSAGE_TYPING: 'RECIVE_CHAT_MESSAGE_TYPING',\n    CHAT_MESSAGE_TYPING_STOP: 'CHAT_MESSAGE_TYPING_STOP'\n}","import { StoreConstants } from \"../StoreConstants\";\n\nexport function fetchChatsLoading() {\n    return {\n        type: StoreConstants.FETCH_CHATS_LOADING\n    }\n}\n\nexport function fetchChatsSuccss(response) {\n    return {\n        type: StoreConstants.FETCH_CHATS_SUCCESS,\n        response\n    }\n}\n\nexport function fetchChatsFailed(faildMessage) {\n    return {\n        type: StoreConstants.FETCH_CHATS_FAILED,\n        faildMessage\n    }\n}\n\nexport function messageSentSuccss(response) {\n    return {\n        type: StoreConstants.MSG_SEND_SUCCESS,\n        response\n    }\n}\n\nexport function messageSentFailed(faildMessage) {\n    return {\n        type: StoreConstants.MSG_SEND_FAILED,\n        faildMessage\n    }\n}\n\nexport function groupMessageSentSuccss(response) {\n    return {\n        type: StoreConstants.GROUP_MSG_SEND_SUCCESS,\n        response\n    }\n}\n\nexport function groupMessageSentFailed(faildMessage) {\n    return {\n        type: StoreConstants.GROUP_MSG_SEND_FAILED,\n        faildMessage\n    }\n}\n\nexport function fetchGroupChatsSuccss(response) {\n    return {\n        type: StoreConstants.FETCH_GROUP_CHATS_SUCCESS,\n        response\n    }\n}\n\nexport function fetchGroupChatsFailed(faildMessage) {\n    return {\n        type: StoreConstants.FETCH_GROUP_CHATS_FAILED,\n        faildMessage\n    }\n}\n\nexport function createGroupSuccss(response) {\n    return {\n        type: StoreConstants.CREATE_GROUP_SUCCESS,\n        response\n    }\n}\n\nexport function createGroupFailed(faildMessage) {\n    return {\n        type: StoreConstants.CREATE_GROUP_FAILED,\n        faildMessage\n    }\n}\n\nexport function reciveGroupChatMsg(response) {\n    return {\n        type: StoreConstants.RECIVE_GROUP_CHAT_MSG_SUCCESS,\n        response\n    }\n}\n\nexport function typingMessages(response){\n    return{\n        type: StoreConstants.RECIVE_CHAT_MESSAGE_TYPING,\n        response\n    }\n}\nexport function typingMessagesStop(response){\n    return{\n        type: StoreConstants.CHAT_MESSAGE_TYPING_STOP,\n        response\n    }\n}\n","import { StoreConstants } from \"../StoreConstants\";\n\nexport function loginLoading() {\n    return {\n        type: StoreConstants.LOGIN_LOADING\n    }\n}\n\nexport function loginSuccss(response) {\n    return {\n        type: StoreConstants.LOGIN_SUCCESS,\n        response,\n    }\n}\n\nexport function loginFailed(response) {\n    return {\n        type: StoreConstants.LOGIN_FAILED,\n        response,\n    }\n}","import { StoreConstants } from \"../StoreConstants\";\n\nexport function signUpLoading() {\n    return {\n        type: StoreConstants.SIGNUP_LOADING\n    }\n}\n\nexport function signUpSuccss(response) {\n    return {\n        type: StoreConstants.SIGNUP_SUCCESS,\n        response\n    }\n}\n\nexport function signUpFailed(response) {\n    return {\n        type: StoreConstants.SIGNUP_FAILED,\n        response\n    }\n}","import { StoreConstants } from \"../StoreConstants\";\n\nexport function fetchUsersLoading() {\n    return {\n        type: StoreConstants.FETCH_USERS_LOADING\n    }\n}\n\nexport function fetchUsersSuccss(response) {\n    return {\n        type: StoreConstants.FETCH_USERS_SUCCESS,\n        response\n    }\n}\n\nexport function fetchUsersFailed(faildMessage) {\n    return {\n        type: StoreConstants.FETCH_USERS_FAILED,\n        faildMessage\n    }\n}","import { fetchChatMessagesFailed, fetchChatMessagesLoading, fetchChatMessagesSuccss } from \"../Store/Action/ChatMessagesAction\";\nimport { createGroupFailed, createGroupSuccss, fetchChatsFailed, fetchChatsLoading, fetchChatsSuccss, fetchGroupChatsFailed, fetchGroupChatsSuccss, groupMessageSentFailed, groupMessageSentSuccss, messageSentFailed, messageSentSuccss } from \"../Store/Action/ChatsAction\";\nimport { loginFailed, loginLoading, loginSuccss } from \"../Store/Action/LoginAction\"\nimport { signUpFailed, signUpLoading, signUpSuccss } from \"../Store/Action/SignUpAction\";\nimport { fetchUsersFailed, fetchUsersLoading, fetchUsersSuccss } from \"../Store/Action/UserAction\";\n\nconst BASE_URL = 'http://localhost:5000/api/';\nconst API = {\n    SIGN_UP: BASE_URL + 'user/signUp',\n    SIGN_IN: BASE_URL + 'user/signIn',\n    FETCH_USERS: BASE_URL + 'user/',\n    SNED_MSG: BASE_URL + 'chat',\n    FETCH_CHAT_MSGS: BASE_URL + 'chat/',\n    FETCH_CHATS: BASE_URL + 'chat/',\n    FETCH_GROUP_CHAT_MSGS: BASE_URL + 'chat/fetchChatRooms/',\n    SNED_GROUP_MSG: BASE_URL + 'chat/sendChatRoomMessage',\n    CREATE_GROUP: BASE_URL + 'chat/createChatRoom',\n    SEND_TYPING_MESSAGE: BASE_URL + 'chat/sendTypingMessage'\n\n}\n\nexport function signUpAPI(payload) {\n    return dispatch => {\n        dispatch(signUpLoading())\n        return fetch(API.SIGN_UP, {\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            method: 'POST',\n            body: JSON.stringify(payload)\n        }).then(response => {\n            return response.json();\n        }).then(response => {\n            console.log(response);\n            if (response && response.statusCode === 0) {\n                dispatch(signUpSuccss(response))\n            } else {\n                dispatch(signUpFailed(response))\n            }\n        }).catch(err => {\n            console.log(err);\n            dispatch(signUpFailed('Signup failed.'))\n        })\n    }\n}\n\nexport function signInAPI(payload) {\n    return dispatch => {\n        dispatch(loginLoading())\n        return fetch(API.SIGN_IN, {\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            method: 'POST',\n            body: JSON.stringify(payload)\n        }).then(response => {\n            return response.json();\n        }).then(response => {\n            console.log(response);\n            if (response && response.statusCode === 0) {\n                dispatch(loginSuccss(response.result[0]));\n            } else {\n                dispatch(loginFailed(response))\n            }\n        }).catch(err => {\n            console.log(err);\n            dispatch(loginFailed('Login failed'))\n        })\n    }\n}\n\nexport function sendMessageAPI(payload) {\n    return dispatch => {\n        return fetch(API.SNED_MSG, {\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            method: 'POST',\n            body: JSON.stringify(payload)\n        }).then(response => {\n            return response.json();\n        }).then(response => {\n            console.log(response);\n            if (response && response.statusCode === 0) {\n                dispatch(messageSentSuccss(response.result[0]));\n            } else {\n                dispatch(messageSentFailed(response.description))\n            }\n        }).catch(err => {\n            console.log(err);\n            dispatch(messageSentFailed('Login failed'))\n        })\n    }\n}\n\nexport function getUsersAPI() {\n    return dispatch => {\n        dispatch(fetchUsersLoading())\n        return fetch(API.FETCH_USERS, {\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            method: 'GET'\n        }).then(response => {\n            return response.json();\n        }).then(response => {\n            console.log(response);\n            if (response && response.statusCode === 0) {\n                dispatch(fetchUsersSuccss(response.result));\n            } else {\n                dispatch(fetchUsersFailed(response.description))\n            }\n        }).catch(err => {\n            console.log(err);\n            dispatch(fetchUsersFailed('Fetch Users failed'))\n        })\n    }\n}\n\nexport function getChatMessagesAPI(chatId) {\n    return dispatch => {\n        dispatch(fetchChatMessagesLoading())\n        return fetch(API.FETCH_CHAT_MSGS + chatId, {\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            method: 'GET'\n        }).then(response => {\n            return response.json();\n        }).then(response => {\n            console.log(response);\n            if (response && response.statusCode === 0) {\n                dispatch(fetchChatMessagesSuccss(response.result[0]));\n            } else {\n                dispatch(fetchChatMessagesFailed(response.description))\n            }\n        }).catch(err => {\n            console.log(err);\n            dispatch(fetchChatMessagesFailed('Fetch Chat Messages failed'))\n        })\n    }\n}\n\nexport function getChatsAPI(userId) {\n    return dispatch => {\n        dispatch(fetchChatsLoading())\n        return fetch(API.FETCH_CHATS + userId, {\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            method: 'GET'\n        }).then(response => {\n            return response.json();\n        }).then(response => {\n            console.log(response);\n            if (response && response.statusCode === 0) {\n                dispatch(fetchChatsSuccss(response.result));\n            } else {\n                dispatch(fetchChatsFailed(response.description))\n            }\n        }).catch(err => {\n            console.log(err);\n            dispatch(fetchChatsFailed('Fetch Chats failed'))\n        })\n    }\n}\n\nexport function getGroupChatMessagesAPI(userId) {\n    return dispatch => {\n        return fetch(API.FETCH_GROUP_CHAT_MSGS + userId, {\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            method: 'GET'\n        }).then(response => {\n            return response.json();\n        }).then(response => {\n            console.log(response);\n            if (response && response.statusCode === 0) {\n                dispatch(fetchGroupChatsSuccss(response.result));\n            } else {\n                dispatch(fetchGroupChatsFailed(response.description))\n            }\n        }).catch(err => {\n            console.log(err);\n            dispatch(fetchGroupChatsFailed('Fetch Group Messages failed'))\n        })\n    }\n}\n\nexport function sendGroupMessageAPI(payload) {\n    return dispatch => {\n        return fetch(API.SNED_GROUP_MSG, {\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            method: 'POST',\n            body: JSON.stringify(payload)\n        }).then(response => {\n            return response.json();\n        }).then(response => {\n            console.log(response);\n            if (response && response.statusCode === 0) {\n                dispatch(groupMessageSentSuccss(response.result[0]));\n            } else {\n                dispatch(groupMessageSentFailed(response.description))\n            }\n        }).catch(err => {\n            console.log(err);\n            dispatch(groupMessageSentFailed('Group message failed'))\n        })\n    }\n}\n\nexport function createGroupAPI(payload) {\n    return dispatch => {\n        return fetch(API.CREATE_GROUP, {\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            method: 'POST',\n            body: JSON.stringify(payload)\n        }).then(response => {\n            return response.json();\n        }).then(response => {\n            console.log(response);\n            if (response && response.statusCode === 0) {\n                dispatch(createGroupSuccss(response.result[0]))\n            } else {\n                dispatch(createGroupFailed(response.description))\n            }\n        }).catch(err => {\n            console.log(err);\n            dispatch(createGroupFailed('Group creation failed.'))\n        })\n    }\n}\n\nexport function sendTypingNotificationAPI(payload){\n    return dispatch =>{\n        return fetch(API.SEND_TYPING_MESSAGE,{\n            headers:{\n                    'Content-Type': 'application/json'\n            },\n            method: 'POST',\n            body: JSON.stringify(payload)\n        }).then(response=>{\n            return response.json();\n        }).then(response=>{\n            console.log(response)\n            // if(response && response.statusCode ===0){\n            //     dispatch(sendTypingNotificationSuccess(response));\n            // }\n        }).catch(err=>{\n            console.log(err);\n        })\n    }\n}","export const  ChatConstants = {\n    GROUP: 'GROUP',\n    USER: 'USER',\n    CHAT_USER_TYPING: 'CHAT_USER_TYPING',\n    GROUP_CHAT_USER_TYPING : 'GROUP_CHAT_USER_TYPING'\n}","export function getFormatedDate(date) {\n    var dt = new Date(date);\n    var currentDate = new Date();\n    var m = ((dt.getMonth() + 1).toString().padStart(2, '0'));\n    var d = (dt.getDate().toString().padStart(2, '0'));\n    var y = (dt.getFullYear().toString().padStart(4, '0'));\n    var time = (`${dt.getHours().toString().padStart(2, '0')}:${dt.getMinutes().toString().padStart(2, '0')}:${dt.getSeconds().toString().padStart(2, '0')}`\n        );\n    if (dt.getDay() === currentDate.getDay()) {\n        return time;\n    } else if(dt.getDate() === currentDate.getDate() -1){\n        return 'Yesterday ' + time;\n    } else{\n        if (dt.getFullYear() === currentDate.getFullYear()) {\n            return d + \"-\" + m + ' ' + time;\n        }else{\n            return d + \"-\" + m + '' + y + ' ' + time;\n        }\n    }\n    // return (`${\n    //     (dt.getMonth()+1).toString().padStart(2, '0')}/${\n    //     dt.getDate().toString().padStart(2, '0')}/${\n    //     dt.getFullYear().toString().padStart(4, '0')} ${\n    //     dt.getHours().toString().padStart(2, '0')}:${\n    //     dt.getMinutes().toString().padStart(2, '0')}:${\n    //     dt.getSeconds().toString().padStart(2, '0')}`\n    // );\n}\nexport function getDateForLeftSideChat(date) {\n    var dt = new Date(date);\n    var currentDate = new Date();\n    var m = ((dt.getMonth() + 1).toString().padStart(2, '0'));\n    var d = (dt.getDate().toString().padStart(2, '0'));\n    var y = (dt.getFullYear().toString().padStart(4, '0'));\n    var time = (`${dt.getHours().toString().padStart(2, '0')}:${dt.getMinutes().toString().padStart(2, '0')}`\n        );\n    if (dt.getDay() === currentDate.getDay()) {\n        return time;\n    } else if(dt.getDate() === currentDate.getDate()-1){\n        return 'Yesterday';\n    } else{\n        if (dt.getFullYear() === currentDate.getFullYear()) {\n            return d + \"-\" + m ;\n        }else{\n            return d + \"-\" + m + '' + y ;\n        }\n    }\n}","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { typingMessagesStop } from '../../Store/Action/ChatsAction';\nimport './Wave.css';\nconst Wave = (props) => {\n    const { name, typing, showName,userNameClass,waveClass } = props;\n    const dispatch = useDispatch();\n    useEffect(()=>{\n        setTimeout(\n            () => dispatch(typingMessagesStop(typing)), \n            10000\n          );\n    })\n    return (\n        <div>\n            <div className={userNameClass}>\n                {showName\n                    ? name + \" is typing\"\n                    : \" typing\"}\n            </div>\n\n            <div id={waveClass}>\n                <span class=\"dot\"></span>\n                <span class=\"dot\"></span>\n                <span class=\"dot\"></span>\n            </div>\n        </div>\n\n    )\n}\nexport default Wave;","import { useEffect, useRef, useState } from \"react\"\nimport { ChatConstants } from \"../../../Utils/Constansts\";\nimport './ChatComponent.css';\nimport './Chat.css';\nimport { getFormatedDate } from \"../../../Utils/CommonUtil\";\nimport Wave from \"../../UtilsComponets/Wave\";\nconst ChatComponet = (props) => {\n\n    const { oldChat, recipientUser, loginInfo, chats, chatType, users } = props;\n    console.log(loginInfo)\n    const [messageText, setMessage] = useState('');\n    const messagesEndRef = useRef(null);\n    const scrollToBottom = () => {\n        messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\", block: \"end\", inline: \"nearest\" })\n\n    };\n    useEffect(() => {\n        scrollToBottom();\n       // sortChats();\n    });\n   \n    const sortChats =()=>{\n        if(chats && chats.length){\n            for(var i=0;i<chats.length;i++){\n                chats[i].chatMessages.sort((a,b) => new Date(a.messageTimestamp) - new Date(b.messageTimestamp));\n                chats[i] = {\n                  ...chats[i],\n                  \"messageTimestamp\": chats[i].chatMessages.length ? chats[i].chatMessages[0].messageTimestamp : new Date()\n                }\n              }\n              chats.sort((a,b)=> new Date(b.messageTimestamp) - new Date(a.messageTimestamp));  \n        }\n        \n    }\n\n    const sendMessage = (e) => {\n        e.preventDefault();\n        console.log(chats);\n        var msg = {};\n        if (chatType === ChatConstants.USER) {\n            msg = {\n                senderId: loginInfo.data.id,\n                recipientId: recipientUser.id,\n                content: messageText,\n                chatId: oldChat.chatId\n            };\n        } else {\n            msg = {\n                \"chatRoomId\": chats.chatRoomId,\n                \"message\": messageText,\n                \"senderId\": loginInfo.data.id\n            }\n        }\n        props.sendMessage(msg, chatType);\n        console.log(\"Message sent successfully\", JSON.stringify(msg))\n        // setMessage({messageText : \"\" });\n        \n          setMessage(\"\")\n         \n    };\n    const handleInputChange = e => {\n        setMessage(e.target.value)\n        const id = chats.chatId !== null && chats.chatId ? chats.chatId : (chats.chatRoomId != null && chats.chatRoomId ? chats.chatRoomId : null);\n        if (e.target.value.length >= 3 && id) {\n            const typing = {\n                id: id,\n                receiverId: recipientUser.id,\n                senderId: loginInfo.data.id,\n                chatType: chatType\n            }\n            props.sendTypingNotification(typing);\n        }\n    }\n    const getUser = (id) => {\n        var i = users.data.findIndex(user => user.id === id);\n        if (i > -1) {\n            return users.data[i];\n        } else {\n            return null;\n        }\n    }\n    const leftSideMsg = (data, index) => {\n        const user = getUser(data.senderUserId);\n        return (\n            <div key={index} className=\"msg left-msg\">\n                <div className=\"msg-img\" style={{ backgroundImage: `url(${user.avatarUrl})` }} ></div>\n\n                <div className=\"msg-bubble\">\n                    <div className=\"msg-info\">\n                        <div className=\"msg-info-name\">{user.firstName}</div>\n                        <div className=\"msg-info-time\">{getFormatedDate(data.messageTimestamp)}</div>\n                    </div>\n\n                    <div className=\"msg-text\">\n                        {data.message}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n    const rightSideMsg = (data, index) => {\n        return (\n            <div key={index} className=\"msg right-msg\">\n                <div className=\"msg-bubble\">\n                    <div className=\"msg-info\">\n                        <div className=\"msg-info-time\">{getFormatedDate(data.messageTimestamp)}</div>\n                    </div>\n                    <div className=\"msg-text\">\n                        {data.message}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n    const populateMsg = (chat, index) => {\n        if (chat && chat.senderUserId && chat.senderUserId === loginInfo.data.id) {\n            return rightSideMsg(chat, index);\n        } else {\n            return leftSideMsg(chat, index);\n        }\n    }\n    const getChatHeader = (chat) => {\n        if (chat && chat.chatId) {\n            const user = getUser(chat.senderUserId === loginInfo.data.id ? chat.reciverUserId : chat.senderUserId);\n            if (user) {\n                return (<div className=\"msger-header-title\">\n                    {user.avatarUrl\n                        ? <img src={user.avatarUrl} alt=\"Avatar\" className=\"chat-user-profile-avatar\" style={{ float: 'left' }}></img>\n                        : <span className=\"chat-user-icon chat-title-user-icon\" />}\n                    <div className=\"chat-title-user-name\">{user.firstName + \" \" + user.lastName}</div>\n                    <i className=\"fas fa-comment-alt\"></i>\n                </div>);\n            } else {\n                return null;\n            }\n\n        } else if (chat && chat.chatRoomId) {\n            return (<div className=\"msger-header-title\">\n                {chat.avatarUrl\n                    ? <img src={chat.avatarUrl} alt=\"Avatar\" className=\"chat-user-profile-avatar\"></img>\n                    : <span className=\"chat-user-group-icon chat-title-group-icon\" />}\n                <div className=\"chat-title-group-name\"> {chat.chatRoomName}</div>\n                <i className=\"fas fa-comment-alt\"> </i>\n            </div>);\n        } else if(recipientUser){\n            return (<div className=\"msger-header-title\">\n                    {recipientUser.avatarUrl\n                        ? <img src={recipientUser.avatarUrl} alt=\"Avatar\" className=\"chat-user-profile-avatar\" style={{ float: 'left' }}></img>\n                        : <span className=\"chat-user-icon chat-title-user-icon\" />}\n                    <div className=\"chat-title-user-name\">{recipientUser.firstName + \" \" + recipientUser.lastName}</div>\n                    <i className=\"fas fa-comment-alt\"></i>\n                </div>);\n        }\n    }\n\n    const typing = (chat) => {\n        if (chat && chat.typing && chat.typing.isTyping) {\n            if (chat.typing.chatType === ChatConstants.USER) {\n                const user = getUser(chat.senderUserId === loginInfo.data.id ? chat.reciverUserId : chat.senderUserId);\n                if (user) {\n                    return (<div>\n                        <Wave\n                            name={user.firstName}\n                            typing={chat.typing}\n                            showName={true}\n                            userNameClass=\"chat-middle-typing-user-name\"\n                            waveClass=\"wave-middle\"\n\n                        />\n                    </div>)\n                } else {\n                    return <div style={{ height: '23px' }}></div>;\n                }\n            } else {\n                const user = getUser(chat.typing.senderId);\n                if (user) {\n                    return (<div>\n                        <Wave\n                            name={user.firstName}\n                            typing={chat.typing}\n                            showName={true}\n                            userNameClass=\"chat-middle-typing-user-name\"\n                            waveClass=\"wave-middle\"\n\n                        />\n                    </div>)\n                } else {\n                    return <div style={{ height: '23px' }}></div>;\n                }\n            }\n\n\n        } else {\n            return <div style={{ height: '23px' }}></div>;\n        }\n    }\n    const handleEnterKeyPress = (e) => {\n        if (e.key === 'Enter') {\n            sendMessage(e);\n        }\n      }\n    return (\n\n        <div className=\"chat-message-container\">\n            <section className=\"msger\">\n                {chatType ?\n                    (<div>\n                        <header className=\"msger-header\">\n                            {getChatHeader(chats)}\n                            <div className=\"msger-header-options\">\n                                <span><i className=\"fas fa-cog\"></i></span>\n                            </div>\n                        </header>\n\n                        <main className=\"msger-chat\" id=\"msger-chat-id\">\n                            {chatType === ChatConstants.USER\n                                ? <div> {chats && chats.chatMessages && chats.chatMessages.length ?\n                                    chats.chatMessages.map((chat, i) =>\n                                        populateMsg(chat, i)\n                                    )\n                                    : \"No Messages to load\"}\n                                </div>\n                                : (chats && chats.chatMessages && chats.chatMessages.length\n                                    ? (chats.chatMessages.map((chat, i) =>\n                                        populateMsg(chat, i)\n                                    ))\n                                    : \"Welcome to group\"\n                                )\n                            }\n\n                            <div ref={messagesEndRef} />\n\n                        </main>\n                        {typing(chats)}\n                        <div className=\"msger-inputarea\">\n                            <input type=\"text\" className=\"msger-input\" placeholder=\"Enter your message...\" value={messageText} name=\"messageText\"  onKeyPress={handleEnterKeyPress} onChange={handleInputChange} />\n                            <span className=\"msger-send-btn\" onClick={sendMessage} />\n                            {/* <button type=\"submit\" className=\"msger-send-btn\" onClick={sendMessage}>Send</button> */}\n                        </div>\n                    </div>\n                    )\n                    : (<div className=\"chat-welcome-image\"><div className=\"chat-welocme-msg\" >Welcome to chat room</div></div>)}\n            </section>\n\n        </div>\n    )\n\n}\nexport default ChatComponet;","// import { BsFillPersonFill } from \"react-bootstrap-icons\";\nimport './UserProfile.css';\nconst UserProfile = (props) => {\n    const {index, user} = props;\n    const handleUser = (user)=>{\n        props.handleUser(user);\n    }\n    return (\n        <div>\n            {/* <BsFillPersonFill/> */}\n            \n        <div key={index} className={props.checked ? props.chatUserProfile + \" chat-user-profile\" : props.chatUserProfile}  onClick={e => { handleUser(user) }}>\n            {user.avatarUrl\n                ? <img src={user.avatarUrl} alt=\"Avatar\" className=\"chat-user-profile-avatar\"></img>\n                : <span className={props.chatUserIcon} />}\n            <div className={user.avatarUrl ? \"chat-user-chat-profile-user-name2\" : \"chat-user-chat-profile-user-name\"} > {user.firstName + ' ' + user.lastName}</div>\n        </div>\n        </div>\n    )\n}\nexport default UserProfile;","import './ChatRight.css';\nimport UserProfile from './UserProfile';\n\nconst UsersComponent = (props) => {\n\n    const { loginInfo, users } = props;\n\n\n    const startChat = (user) => {\n        console.log(user);\n        props.startChat(user);\n    }\n    const closeOpenOption  = ()=>{\n        console.log(\"clicked closeOpenOption\")\n        props.closeOpenOption();\n    }\n\n    return (\n        <div>\n            <div className=\"\">\n                <div className=\"chat-right-header\">\n                   <spnan className=\"c-all-users\">All Users</spnan>\n                   <span className=\"c-back-chat\" onClick={closeOpenOption}>X</span>\n                </div>\n                <div>\n                <input className=\"chat-user-group-search-input\" placeholder=\"Search User\" type=\"text\"  />\n                </div>\n                <div className=\"users-div\">\n                    {users && users.data && users.data.length ?\n                        (users.data.map((val, index) =>\n                            val.id === loginInfo.data.id\n                                ? null\n                                : <UserProfile\n                                    user={val}\n                                    index={index}\n                                    handleUser={startChat}\n                                    chatUserProfile=\"chat-user-chat-profile\"\n                                    chatUserIcon=\"chat-user-icon\"\n                                />\n                        ))\n                        : \"No Users Found\"\n                    }\n                </div>\n            </div>\n        </div>\n    )\n    // (<div key={index}className=\"chat-user-chat-profile\" onClick={e => { startChat(val) }}>\n    //                                 {val.avatarUrl\n    //                                     ? <img src={val.avatarUrl} alt=\"Avatar\" className=\"chat-user-profile-avatar\"></img>\n    //                                     : <span className=\"chat-user-icon\" />}\n    //                                 <div  className= {val.avatarUrl ? \"chat-user-chat-profile-user-name2\" : \"chat-user-chat-profile-user-name\"} > {val.firstName + ' ' + val.lastName}</div>\n    //                             </div>)\n}\nexport default UsersComponent;","import React from 'react';\nimport UserProfile from '../Chat/RightChat/UserProfile';\n\nclass UserOption extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = { selected: false }\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    handleChange() {\n        this.setState(\n            prevState => ({ selected: !prevState.selected }),\n            () => this.props.onOptionChange(this.props.id, this.state.selected)\n        )\n    }\n\n    render() {\n        return (\n            <div>\n                <div id={this.props.id}>\n                <UserProfile\n                    user={this.props.user}\n                    index={this.props.id}\n                    handleUser={this.handleChange}\n                    chatUserProfile=\"chat-user-profile-group-create\"\n                    chatUserIcon=\"chat-user-icon\"\n                    checked={this.state.selected}\n                />\n                </div>\n            </div>\n        )\n    }\n}\nexport default UserOption;","import React from 'react';\nimport UserOption from './UserOption';\n\nclass MultiSelect extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = { selectedOptions: [] }\n        this.onOptionsChange = this.onOptionsChange.bind(this)\n    }\n\n    onOptionsChange(option, selected) {\n        if (selected) {\n            this.setState(\n                prevState => {\n                    prevState.selectedOptions.push(option)\n                    return {\n                        selectedOptions: prevState.selectedOptions,\n                    }\n                },\n                () => this.props.onOptionsChange(this.state.selectedOptions)\n            )\n        } else {\n            this.setState(\n                prevState => {\n                    const index = prevState.selectedOptions.indexOf(option)\n                    if (index > -1) {\n                        prevState.selectedOptions.splice(index, 1)\n                    }\n                    return {\n                        selectedOptions: prevState.selectedOptions,\n                    }\n                },\n                () => this.props.onOptionsChange(this.state.selectedOptions)\n            )\n        }\n    }\n\n    render() {\n        return (\n            <fieldset>\n                <legend>{this.props.title}</legend>\n                {this.props.options.map((option, index) => (\n                    <UserOption\n                        user={option}\n                        key={option.id}\n                        id={option.id}\n                        option={option.firstName}\n                        onOptionChange={this.onOptionsChange}\n                        \n                    />\n                    // <Option key={option.id} id={option.id} option={option.firstName} onOptionChange={this.onOptionsChange} />\n                ))}\n            </fieldset>\n        )\n    }\n}\n\nexport default MultiSelect;","import { useState } from \"react\";\nimport MultiSelect from \"../../UtilsComponets/MultiSelect\";\n\nconst CreateChatGroup = (props) => {\n    const { users ,loginInfo } = props;\n    const [groupInfo, setGroupInfo] = useState({ 'groupName': '', 'groupMembers': [] })\n\n    const handleInputChange = (e) => {\n        setGroupInfo({\n            ...groupInfo,\n            [e.target.name]: e.target.value\n        })\n    }\n    const handleSelectUsers = (user) => {\n        console.log(user);\n        setGroupInfo({\n            ...groupInfo,\n            groupMembers : user\n        })\n        console.log(groupInfo);\n    }\n    const clickCreateGroup = () => {\n        const groupData = {\n            \"chatRoomName\": groupInfo.groupName,\n            \"chatRoomUserIds\": groupInfo.groupMembers,\n            \"createdBy\": loginInfo.data.id,\n        }\n        props.submitCreateGroup(groupData)\n    }\n    \n    return (\n        <div className=\"create-chat-room-container\">\n            <div className=\"chat-group-create-btns\">\n                <span className=\"group-create-name\">New Chat Group</span>\n                <button className=\"btn-close-group\" onClick={props.backFromCreateGroup} >X</button>\n            </div>\n            <div className=\"group-name-btn-div\">\n                <input type=\"text\" className=\"group-name-input\" name=\"groupName\" placeholder=\"Enter Group Name\" onChange={handleInputChange} />\n                <button className=\"chat-btn btn-create\" onClick={clickCreateGroup} >Create Group</button>\n            </div>\n            <div style={{padding: '5px'}}>Select the participants</div>\n            <div>\n                <MultiSelect\n                    options={users.data}\n                    onOptionsChange={handleSelectUsers}\n                />\n\n            </div>\n            \n        </div>\n    )\n}\nexport default CreateChatGroup;","import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ChatConstants } from '../../../Utils/Constansts';\nimport { getDateForLeftSideChat } from \"../../../Utils/CommonUtil\";\nimport Wave from '../../UtilsComponets/Wave';\nimport './ChatLeft.css';\n\n// const UserIcon = require('../../../images/user-icon.jpg');\n\nconst UserChatComponet = (props) => {\n    const { chats, oldChat, recipientUser, loginInfo, users } = props;\n    // let { chats} = props;\n    const [chatList, setChatList] = useState([]);\n    const [searchChat, setSearchChat] = useState('');\n    const openUserChat = (data, type) => {\n        props.openUserChat(data, type);\n    }\n    const getUserObj = (obj) => {\n        return obj.reciverUser && loginInfo.data && obj.reciverUser.id === loginInfo.data.id ? obj.senderUser : obj.reciverUser;\n    }\n    let _chats = useSelector(state => state.chats);\n    // useEffect(() => {\n    //     setChatList(_chats);\n    // }, [_chats])\n    // useEffect( ()=>{\n    //     if(chatList.data && searchChat){\n    //         setChatList(chatList.data.filter(chat=> { \n    //             return ((chat.chatRoomName && chat.chatRoomName.toLowerCase().includes(searchChat)) ||(chat.reciverUser && chat.reciverUser.firstName && chat.reciverUser.firstName.toLowerCase().includes(searchChat)) )\n    //         }));\n    //         //setChatList(c);\n    //     }\n\n    // },[searchChat,chatList])\n    // if(searchChat){\n\n    // setChatList(chats.data.filter(chat=> { \n    //     return ((chat.chatRoomName && chat.chatRoomName.toLowerCase().includes(searchChat)) ||(chat.reciverUser && chat.reciverUser.firstName && chat.reciverUser.firstName.toLowerCase().includes(searchChat)) )\n    // }));\n    // setChatList(c);\n    // catalogRoleMapData = catalogRoleMapData.filter((item) => {return item.catalogRoleName.toLowerCase().indexOf(searchValue.toLowerCase()) > -1})\n    // }\n    const searchChats = (e) => {\n        chats.data = chatList.data.filter(chat => {\n            return ((chat.chatRoomName && chat.chatRoomName.toLowerCase().indexOf(searchChat) > -1) || (chat.reciverUser && chat.reciverUser.firstName && chat.reciverUser.firstName.toLowerCase().indexOf(searchChat) > -1))\n            // chats.data = _chats.data.filter((chat) => {return item.catalogRoleName.toLowerCase().indexOf(searchValue.toLowerCase()) > -1})\n        });\n    }\n    const getUser = (id) => {\n        if(users.data){\n            var i = users.data.findIndex(user => user.id === id);\n            if (i > -1) {\n                return users.data[i];\n            } else {\n                return null;\n            }\n        } else {\n            return null;\n        }\n        \n    }\n    const typing = (chat) => {\n        if (chat && chat.typing && chat.typing.isTyping) {\n            let user;\n            if (chat.typing.chatType === ChatConstants.USER) {\n                user = getUser(chat.senderUserId === loginInfo.data.id ? chat.reciverUserId : chat.senderUserId);\n            }else{\n                user = getUser(chat.typing.senderId);\n            }\n            if (user) {\n                return (<div>\n                    <Wave\n                        name={user.firstName}\n                        typing={chat.typing}\n                        showName={false}\n                        userNameClass=\"chat-left-typing-user-name\"\n                        waveClass=\"wave-left-side\"\n                    />\n                </div>)\n            } else {\n                return <div style={{ height: '23px' }}></div>;\n            }\n\n        } else {\n            return <div style={{ height: '23px' }}></div>;\n        }\n    }\n    const renderGroups = (obj, index) => {\n        return (<div key={index} id={index} className=\"chat-user-chat-profile\" onClick={e => { openUserChat(obj, ChatConstants.GROUP) }}>\n            {obj.avatarUrl && obj.avatarUrl !== null\n                ? <img src={obj.avatarUrl} alt=\"Avatar\" className=\"chat-user-profile-avatar\"></img>\n                : <span className=\"chat-user-group-icon\" />}\n            <div className=\"chat-user-chat-profile-user-name\" key={obj.chatRoomId}> {obj.chatRoomName} </div>\n            <div className=\"chat-left-last-timestamp\">{getDateForLeftSideChat(obj.lastTimestamp)}</div>\n            { obj.typing && obj.typing.isTyping \n            ? typing(obj) \n            : <div className=\"chat-left-last-sent\">{obj.lastMessageSentBy ? (getUser(obj.lastMessageSentBy).firstName + \": \" + obj.lastMessage) : \"\"}</div>\n            }\n            <div className={obj.lastMessageSentBy ? \"chat-left-msg-count\" : \"chat-left-msg-count-2\"}>10</div>\n        </div>)\n    }\n    const renderUsers = (obj, index) => {\n        return (<div key={index}  id={index} className=\"chat-user-chat-profile\" onClick={e => { openUserChat(obj, ChatConstants.USER) }}>\n            {getUserObj(obj).avatarUrl\n                ? <img src={getUserObj(obj).avatarUrl} alt=\"Avatar\" className=\"chat-user-profile-avatar\" ></img>\n                : <span className=\"chat-user-icon\" style={{ marginLeft: '-5px' }} />}\n            <div className={getUserObj(obj).avatarUrl ? \"chat-user-chat-profile-user-name2\" : \"chat-user-chat-profile-user-name\"} key={obj.chatId}>{getUserObj(obj).firstName} </div>\n            <div className=\"chat-left-last-timestamp\">{getDateForLeftSideChat(obj.lastTimestamp)}</div>\n            { obj.typing && obj.typing.isTyping \n            ? typing(obj) \n            : <div  className=\"chat-left-last-sent\">{getUser(obj.lastMessageSentBy).firstName + \": \" + obj.lastMessage}</div>\n            }\n            <div className=\"chat-left-msg-count\">\n                <span style={{textAlign: 'center',padding: '5px'}}>5</span></div>\n        </div>)\n    }\n    return (\n        <div>\n            <div className=\"chat-user-group-search\">\n                <input className=\"chat-user-group-search-input\" placeholder=\"Search Chat\" type=\"text\"  />\n                {/* //onChange={e => { setSearchChat(e.target.value); searchChats(e) }} */}\n            </div>\n\n            <div className=\"chat-user-chats\" id=\"jkj12\">\n                {chats && chats.data ?\n                    (chats.data.map((obj, index) =>\n                        obj.chatId\n                            ? renderUsers(obj, index)\n                            : renderGroups(obj, index)\n                    ))\n                    : null\n                }\n                {/* {oldChat.chatId === undefined && recipientUser.id && (chats.data.length === 0 || chats.data.findIndex(chatObj => chatObj.reciverUser.id === recipientUser.id) === -1) ?\n                    <div key={recipientUser.id} id={recipientUser.id} className=\"chat-user-chat-profile\" onClick={e => { openUserChat(recipientUser, ChatConstants.USER) }}>\n                        <div className=\"chat-user-chat-profile-user-name\" >{recipientUser.firstName} </div>\n                    </div>\n                    : \"\"\n                } */}\n            </div>\n        </div>\n    )\n}\n\nexport default UserChatComponet;","import './DropDown.css';\nconst Dropdown = (props) => {  \n    const { dropDownList } = props;\n    const selectedItem = (item) =>{\n        props.selectedItem(item);\n    }\n    return(\n        <div className=\"chat-dropdown-menu\">\n            {\n                dropDownList.map((item,index) => \n                    <div className=\"chat-dropdown-option\" key={index} onClick={e=>selectedItem(item)}> {item} </div>\n                )\n            }\n        </div>\n    )\n}\nexport default Dropdown;","import { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport CreateChatGroup from \"./CreateChatGroupComponet\";\nimport UserChatComponet from \"./UserChatComponet\";\nimport './ChatLeft.css';\nimport Dropdown from \"../../UtilsComponets/DropDown\";\nimport { ChatConstants } from \"../../../Utils/Constansts\";\nimport UsersComponent from \"../RightChat/UsersComponent\";\n\nconst options = [\"All Users\", \"Create Group\", \"Settings\",\"Logout\"];\nconst ChatLeftComponet = (props) => {\n\n    const { oldChat, recipientUser, loginInfo, chats, users } = props;\n    const [openOptions, setOpenOptions] = useState(false);\n    const [createGroup, setCreateGroup] = useState(false);\n    const [usersListPage, setusersListPage] = useState(false);\n    const dispatch = useDispatch();\n    useEffect(() => {\n        console.log(\"oldChat\", oldChat)\n        console.log(\"recipientUser\", recipientUser)\n        // if(oldChat.chatId === undefined && recipientUser.id){\n        //     chats\n        // }\n    })\n    const openUserChat = (chatObj, type) => {\n        props.openUserChat(chatObj, type);\n    }\n    const clickOpenOption = () => {\n        setOpenOptions(prev=> !prev);\n    }\n    const handelCloseOpenOption = () => {\n        setOpenOptions(false);\n    }\n    \n    const closeOpenOption = () => {\n        setOpenOptions(false);\n        setusersListPage(false);\n        setCreateGroup(false);\n    }\n\n    const submitCreateGroup = (groupInfo) => {\n        console.log(groupInfo);\n        setCreateGroup(false);\n        props.submitCreateGroup(groupInfo);\n    }\n    const backFromCreateGroup = () => {\n        setCreateGroup(false);\n        setusersListPage(false);\n        setOpenOptions(false);\n    }\n    const selectedItem = (item) => {\n        console.log(item);\n        setOpenOptions(false);\n        if (item === \"Create Group\") {\n            setCreateGroup(true);\n        }else if (item === \"All Users\") {\n            setusersListPage(true);\n        } else if (item === \"Logout\"){\n            window.location.reload();\n        }\n    }\n\n    const startChat = (user) => {\n        console.log(user);\n        props.startChat(user);\n        closeOpenOption();\n    }\n    \n    return (\n\n        <div className=\"chat-left-container\">\n            <div className=\"chat-left-top\">\n                <div className=\"chat-left-user-profile\">\n                    {loginInfo.data.avatarUrl\n                        ? <img src={loginInfo.data.avatarUrl} alt=\"Avatar\" className=\"chat-user-profile-avatar\"></img>\n                        : <span className=\"chat-user-icon\" />}\n                    <span className={loginInfo.data.avatarUrl ? \"chat-left-user-profile-user-name\" : \"chat-left-user-profile-user-name2\"}>{loginInfo.data.firstName}</span>\n                </div>\n                <div className=\"chat-left-options\" >\n                    <i className=\"chat-left-options-icon\" onClick={clickOpenOption}>...</i>\n                    {openOptions\n                        ? <Dropdown\n                            selectedItem={selectedItem}\n                            dropDownList={options}\n                        /> : ''}\n\n                </div>\n            </div>\n            {createGroup ?\n                <CreateChatGroup\n                    users={users}\n                    submitCreateGroup={submitCreateGroup}\n                    loginInfo={loginInfo}\n                    backFromCreateGroup={backFromCreateGroup}\n                />\n                :\n                (usersListPage ? \n                <div>\n                    <div className=\"chat-right\">\n                    <UsersComponent\n                        startChat={startChat}\n                        loginInfo={loginInfo}\n                        users={users}\n                        closeOpenOption = {closeOpenOption}\n                        // chatType={chatType}\n                    />\n                </div>\n                </div> \n                : (<div onClick={handelCloseOpenOption}>\n                    <UserChatComponet\n                        loginInfo={loginInfo}\n                        chats={chats}\n                        _chats={chats}\n                        oldChat={oldChat}\n                        recipientUser={recipientUser}\n                        openUserChat={openUserChat}\n                        users={users}\n                    />\n                </div>))\n            }\n        </div>\n    )\n\n}\nexport default ChatLeftComponet;","import './ChatContainer.css';\nimport ChatComponet from '../../Componet/Chat/MiddleChat/ChatComponent';\nimport UsersComponent from '../../Componet/Chat/RightChat/UsersComponent';\nimport { useEffect, useLayoutEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { createGroupAPI, getChatsAPI, getGroupChatMessagesAPI, getUsersAPI, sendGroupMessageAPI, sendMessageAPI, sendTypingNotificationAPI } from '../../Services/APIService';\nimport { useSelector } from 'react-redux';\nimport ChatLeftComponet from '../../Componet/Chat/LeftChat/ChatLeftComponet';\nimport { fetchGroupChatsSuccss, messageSentSuccss, reciveGroupChatMsg, typingMessages } from '../../Store/Action/ChatsAction';\nimport {ChatConstants} from '../../Utils/Constansts';\nimport { Col, Container, Row } from 'react-bootstrap';\n\nvar stompClient = null;\nconst ChatContainer = (props) => {\n    const { loginInfo } = props;\n\n    const [recipientUser, setRecipientUser] = useState({});\n    const [oldChat, setOldChat] = useState({});\n    const [chatType, setChatType] = useState('');\n\n    const dispatch = useDispatch();\n    useLayoutEffect(() => {\n        dispatch(getUsersAPI());\n    }, [dispatch]);\n    useEffect(() => {\n        dispatch(getChatsAPI(loginInfo.data.id));\n        dispatch(getGroupChatMessagesAPI(loginInfo.data.id))\n    }, [dispatch, loginInfo.data.id])\n\n    useEffect(() => {\n        if (stompClient == null) {\n            connect();\n        }\n    });\n\n\n\n    const users = useSelector((state) => state.users);\n\n    console.log(\"users\", users)\n    const chats = useSelector(state => state.chats);\n\n    const startChat = (user) => {\n        console.log(user);\n        setRecipientUser({\n            ...user\n        })\n        let chat = null;\n        if (chats && chats.data) {\n            const i = chats.data.findIndex(chat => (chat.senderUserId === loginInfo.data.id || chat.senderUserId === user.id) && (chat.reciverUserId === user.id || chat.reciverUserId === loginInfo.data.id))\n            if (i > -1) {\n                chat = chats.data[i]\n            } else {\n                chat = null;\n            }\n            console.log(chat);\n        }\n        setOldChat({\n            ...chat\n        })\n        setChatType(ChatConstants.USER);\n    }\n\n    const openUserChat = (chatObj,type) => {\n        console.log(chatObj);\n        let chat = null;\n        if (ChatConstants.USER === type) {\n            if (loginInfo.data.id === chatObj.reciverUser.id) {\n                setRecipientUser({ ...chatObj.senderUser })\n            } else {\n                setRecipientUser({ ...chatObj.reciverUser })\n            }\n            if (chats && chats.data) {\n                const i = chats.data.findIndex(chat =>\n                    chat.senderUser && (chat.senderUser.id === loginInfo.data.id || chat.senderUser.id === chatObj.senderUser.id) && chat.reciverUser && (chat.reciverUser.id === chatObj.reciverUser.id || chat.reciverUser.id === loginInfo.data.id))\n                if (i > -1) {\n                    chat = chats.data[i]\n                }\n            }\n        } else {\n            if (chats && chats.data) {\n                const i = chats.data.findIndex(chat => chat.chatRoomId === chatObj.chatRoomId)\n                if (i > -1) {\n                    chat = chats.data[i]\n                }\n            }\n        }\n        setOldChat({ ...chat })\n        setChatType(type);\n    }\n\n    const connect = () => {\n        const Stomp = require(\"stompjs\");\n        var SockJS = require(\"sockjs-client\");\n        const wsurl = window.location.origin === 'http://localhost:3001' ? \"http://localhost:2727/ws\" : window.location.origin + \"/ws\";\n        SockJS = new SockJS(wsurl);\n        stompClient = Stomp.over(SockJS);\n        stompClient.connect({}, onConnected, onError);\n    };\n\n    const onConnected = () => {\n        console.log(\"connected\");\n        stompClient.subscribe(\n            \"/user/\" + loginInfo.data.id + \"/queue/messages\",\n            onMessageReceived\n        );\n    };\n\n    const onError = (err) => {\n        console.log(err);\n    };\n\n    const onMessageReceived = (msg) => {\n        const notification = JSON.parse(msg.body);\n        console.log(\"Message recevied\", notification);\n        if(ChatConstants.USER === notification.messageType){\n            dispatch(messageSentSuccss(notification.message[0]))\n        }else if(ChatConstants.GROUP === notification.messageType){\n            dispatch(reciveGroupChatMsg(notification.message[0]))\n        }else if(ChatConstants.CHAT_USER_TYPING === notification.messageType){\n            dispatch(typingMessages(notification.message));\n        }else if(ChatConstants.GROUP_CHAT_USER_TYPING === notification.messageType){\n            dispatch(typingMessages(notification.message));\n        }\n       \n        \n    };\n    const sendMessage = (msg,type) => {\n        // stompClient.send(\"/app/api/chat\", {}, JSON.stringify(msg));\n        if(type === ChatConstants.USER){\n            dispatch(sendMessageAPI(msg));\n        }else{\n            dispatch(sendGroupMessageAPI(msg));\n        }\n        \n        console.log(\"Message sent successfully\", JSON.stringify(msg))\n    };\n    const sendTypingNotification = (payload)=>{\n        dispatch(sendTypingNotificationAPI(payload))\n    }\n\n    const getCurrentChat = () => {\n        if (chats && chats.data && chats.data.length) {\n            var i = -1;\n            if(chatType === ChatConstants.USER){\n                i = chats.data.findIndex(chat => ((chat.chatId && chat.chatId === oldChat.chatId) || chat.reciverUserId === recipientUser.id));\n            }else{\n                i = chats.data.findIndex(chat => chat.chatRoomId === oldChat.chatRoomId);\n            }\n            \n            if (i > -1) {\n                return chats.data[i];\n            } else if (chats.data.length === 1 && (oldChat.chatId || oldChat.chatRoomId)) {\n                return chats.data[0];\n            } else {\n                return null;\n            }\n        } else {\n            return null;\n        }\n    }\n    const submitCreateGroup = (groupInfo) => {\n        dispatch(createGroupAPI(groupInfo));\n    }\n    \n    return (\n        \n        <div className=\"chat-container\">\n            <div className=\"chat-row\">\n                <div className=\"chat-left\">\n                    <ChatLeftComponet\n                        oldChat={oldChat}\n                        recipientUser={recipientUser}\n                        loginInfo={loginInfo}\n                        chats={chats}\n                        openUserChat={openUserChat}\n                        users={users}\n                        submitCreateGroup={submitCreateGroup}\n                        startChat={startChat}\n                    />\n                </div>\n                <div className=\"chat-middle\">\n                    <ChatComponet\n                        oldChat={oldChat}\n                        recipientUser={recipientUser}\n                        loginInfo={loginInfo}\n                        sendMessage={sendMessage}\n                        chats={getCurrentChat()}\n                        chatType={chatType}\n                        users={users}\n                        sendTypingNotification = {sendTypingNotification}\n                    />\n                </div>\n                {/* <div className=\"chat-right\">\n                    <UsersComponent\n                        startChat={startChat}\n                        loginInfo={loginInfo}\n                        users={users}\n                        chatType={chatType}\n                    />\n                </div> */}\n            </div>\n        </div>\n    )\n\n\n}\n\nexport default ChatContainer;","import React from 'react';\nimport { connect } from 'react-redux';\nimport Login from '../Componet/Login/Login';\nimport SignUp from '../Componet/SignUp/SignUp';\nimport { signInAPI, signUpAPI } from '../Services/APIService';\nimport ChatContainer from './Chat/ChatContainer';\nimport './MainContainer.css';\n\nclass MainContainer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isSignIn: true,\n        }\n        this.createAccount = this.createAccount.bind(this);\n        this.signIn = this.signIn.bind(this);\n        this.gotoLogin = this.gotoLogin.bind(this);\n    }\n\n    createAccount(payload) {\n        console.log(payload);\n        this.props.signUp(payload)\n        .then(()=>{\n            console.log(this.props.signUpData);\n             if(this.props.signUpData && !this.props.signUpData.isError){\n                setTimeout(() => this.setState({ isSignIn: true }), 2000);\n             }else{\n                this.setState({\n                    isSignIn: false\n                })\n             }\n            \n         })\n    }\n    signIn(payload) {\n        console.log(payload);\n        this.props.signIn(payload);\n        \n    }\n    gotoLogin() {\n        this.setState({\n            isSignIn: true\n        })\n    }\n    handleScroll = (e) => {\n        // if (e.target.classList && e.target.classList.contains(\"on-scrollbar\") === false) {\n        //     e.target.classList.add(\"on-scrollbar\");\n        // }\n    }\n    render() {\n        return (\n            <div>\n                {console.log(\"m -loginInfo\",this.props.loginInfo)}\n                {this.props.loginInfo && !this.props.loginInfo.isLogin ?\n                    <div className=\"main-container\">\n                        <div className=\"main-login-container\">\n                            {/* {window.addEventListener('scroll', this.handleScroll, true)} */}\n\n                            <div className=\"signin-signup-div\">\n                                <span>Welcome to Chat Application</span>\n                            </div>\n                            {(this.state.isSignIn ?\n                                <div>\n                                    <Login signIn={this.signIn}\n                                    loginInfo={this.props.loginInfo} />\n                                    <button className=\"btn-info c-cbtn-sign-up\" onClick={e => { this.setState({ isSignIn: false }) }}>Create Account!</button>\n                                </div>\n                                :\n                                <SignUp createAccount={this.createAccount} gotoLogin={this.gotoLogin} />\n                            )\n                            }\n\n                        </div>\n                    </div>\n                    : <ChatContainer\n                        loginInfo={this.props.loginInfo}\n                    />}\n            </div>\n\n        )\n    }\n}\nfunction mapStateToProps(state) {\n    return {\n        loginInfo: state.loginInfo,\n        signUpData: state.signUp\n    }\n}\nfunction mapDispatchToProps(dispatch) {\n    return {\n        dispatch,\n        signIn: (payload) => dispatch(signInAPI(payload)),\n        signUp: (payload) => dispatch(signUpAPI(payload))\n\n    }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps, null, { pure: false })(MainContainer);","import React from 'react';\nimport './App.css';\nimport MainContainer from './Container/MainContainer';\n\nclass App extends React.Component {\n\n\n  render() {\n    return (\n      <div>\n        <MainContainer />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import { ChatConstants } from \"../../Utils/Constansts\";\nimport { StoreConstants } from \"../StoreConstants\"\n\nexport function fetchChatsReducer(state = {}, action) {\n    switch (action.type) {\n        case StoreConstants.FETCH_CHATS_LOADING: {\n            return {\n                ...state,\n                isLoading: true,\n                isError: false,\n                data: []\n            };\n        }\n        case StoreConstants.FETCH_CHATS_SUCCESS: {\n            return {\n                ...state,\n                isLoading: false,\n                isError: false,\n                data: sortChats(action.response)\n            };\n        }\n        case StoreConstants.FETCH_CHATS_FAILED: {\n            return {\n                ...state,\n                isLoading: false,\n                isError: true,\n                data: [],\n                message: action.failedMessage\n            };\n        }\n        case StoreConstants.MSG_SEND_SUCCESS: {\n            return {\n                ...state,\n                isLoading: false,\n                isError: false,\n                data: sortChats(upSertChat(state.data,action.response))\n            };\n        }\n        case StoreConstants.MSG_SEND_FAILED: {\n            return {\n                ...state,\n                isLoading: false,\n                isError: true,\n                message: action.failedMessage\n            };\n        }\n        case StoreConstants.GROUP_MSG_SEND_SUCCESS: {\n            return {\n                ...state,\n                isLoading: false,\n                isError: false,\n                data: sortChats(upSertGroupChat(state.data,action.response))\n            };\n        }\n        case StoreConstants.GROUP_MSG_SEND_FAILED: {\n            return {\n                ...state,\n                isLoading: false,\n                isError: true,\n                message: action.failedMessage\n            };\n        }\n        case StoreConstants.FETCH_GROUP_CHATS_SUCCESS: {\n            return {\n                ...state,\n                isLoading: false,\n                isError: false,\n                data: sortChats(addGroupMessegesToChat(state.data,action.response))\n            };\n        }\n        case StoreConstants.FETCH_GROUP_CHATS_FAILED: {\n            return {\n                ...state,\n                isLoading: false,\n                isError: true,\n                message: action.failedMessage\n            };\n        }case StoreConstants.CREATE_GROUP_SUCCESS: {\n            return {\n                ...state,\n                isLoading: false,\n                isError: false,\n                data: sortChats(addGroupMessegesToChat(state.data,action.response))\n            };\n        }\n        case StoreConstants.CREATE_GROUP_FAILED: {\n            return {\n                ...state,\n                isLoading: false,\n                isError: true,\n                message: action.failedMessage\n            };\n        }\n        case StoreConstants.RECIVE_GROUP_CHAT_MSG_SUCCESS: {\n            return {\n                ...state,\n                isLoading: false,\n                isError: false,\n                data: sortChats(upSertGroupChat(state.data,action.response))\n            };\n        }\n        case StoreConstants.RECIVE_CHAT_MESSAGE_TYPING:{\n            return{\n                ...state,\n                data: chatMessageTypingStart(state.data,action.response)\n            }\n        }\n        case StoreConstants.CHAT_MESSAGE_TYPING_STOP:{\n            return{\n                ...state,\n                data: chatMessageTypingStop(state.data,action.response)\n            }\n        }\n        default:\n            return state;\n    }\n}\n\nexport function upSertChat(array, chat) {\n    if (array && array.length) {\n        const i = array.findIndex(_item => _item.chatId === chat.chatId);\n        if (i > -1){\n            array[i].chatMessages.push(chat.chatMessages[0]);\n        }  else{\n            array.push(chat);\n        } \n        return array;\n    }else{\n        return [chat];\n    }\n}\n\nexport function upSertGroupChat(array, chat) {\n    if (array && array.length) {\n        const i = array.findIndex(_item => _item.chatRoomId === chat.chatRoomId);\n        if (i > -1){\n            array[i].chatMessages.push(chat.chatMessages[0]);\n        }  else{\n            array.push(chat);\n        } \n        return array;\n    }else{\n        return [chat];\n    }\n}\n\nexport function addGroupMessegesToChat(chats,groups){\n    if(chats && chats.length){\n        var newArray = chats.concat(groups);\n        return newArray;\n    }else{\n        return [groups];\n    }\n}\nexport function chatMessageTypingStart(array,currentChat){\n    if(currentChat.chatType === ChatConstants.USER){\n        const i = array.findIndex(_item => _item.chatId === currentChat.id);\n        if (i > -1){            \n            array[i] = {\n                ...array[i],\n                typing:{\n                   ...currentChat,isTyping:true\n                }\n            };\n        }\n        return array;\n    }else{\n        const i = array.findIndex(_item => _item.chatRoomId === parseInt(currentChat.id));\n        if (i > -1){            \n            array[i] = {\n                ...array[i],\n                typing:{\n                   ...currentChat,isTyping:true\n                }\n            };\n        }\n        return array;\n    }\n}\n\nexport function chatMessageTypingStop(array,currentChat){\n    if(currentChat.chatType === ChatConstants.USER){\n        const i = array.findIndex(_item => _item.chatId === currentChat.id);\n        if (i > -1){            \n            array[i] = {\n                ...array[i],\n                typing:{\n                    ...currentChat,isTyping:false\n                }\n            };\n        }\n        return array;\n    }else{\n        const i = array.findIndex(_item => _item.chatRoomId === parseInt(currentChat.id));\n        if (i > -1){            \n            array[i] = {\n                ...array[i],\n                typing:{\n                    ...currentChat,isTyping:false\n                }\n            };\n        }\n        return array;\n    }\n}\n\nexport function sortChats(chats){\n    if(chats && chats.length){\n        for(var i=0;i<chats.length;i++){\n            if(chats[i].chatMessages){\n                chats[i].chatMessages = chats[i].chatMessages.sort((a,b) => new Date(b.messageTimestamp) - new Date(a.messageTimestamp));\n                chats[i] = {\n                  ...chats[i],\n                  \"lastTimestamp\": chats[i].chatMessages.length ? chats[i].chatMessages[0].messageTimestamp : chats[i].createdTimestamp,\n                  \"lastMessage\": chats[i].chatMessages.length ? chats[i].chatMessages[0].message : \"\",\n                  \"lastMessageSentBy\": chats[i].chatMessages.length ? chats[i].chatMessages[0].senderUserId : \"\"\n                }\n                chats[i].chatMessages = chats[i].chatMessages.sort((a,b) => new Date(a.messageTimestamp) - new Date(b.messageTimestamp));\n              }\n            }\n            \n          chats = chats.sort((a,b)=> new Date(b.lastTimestamp) - new Date(a.lastTimestamp));  \n    }\n    return chats;\n    \n}","import { combineReducers } from 'redux';\nimport { chatMessagesReducer } from './Reducer/ChatMessagesReducer';\nimport { fetchChatsReducer } from './Reducer/ChatReducer';\nimport { loginReducer } from \"./Reducer/LoginReducer\"\nimport { signUpReducer } from './Reducer/SignUpReducer';\nimport { usersReducer } from './Reducer/UsersReducer';\nconst rootReducer = combineReducers({\n    loginInfo: loginReducer,\n    users: usersReducer,\n    chatMessages: chatMessagesReducer,\n    chats: fetchChatsReducer,\n    signUp: signUpReducer\n})\n\nexport default rootReducer;","import { StoreConstants } from \"../StoreConstants\"\n\nexport function loginReducer(state = {}, action) {\n    switch (action.type) {\n        case StoreConstants.LOGIN_LOADING: {\n            return {\n                ...state,\n                isLogin: false,\n                data: null,\n                loginType: null,\n                message: null\n            };\n        }\n        case StoreConstants.LOGIN_SUCCESS: {\n            return {\n                ...state,\n                isLogin: true,\n                data: action.response,\n                message: null\n            };\n        }\n        case StoreConstants.LOGIN_FAILED: {\n            return {\n                ...state,\n                isLogin: false,\n                data: action.response,\n                message:action.response.description\n            };\n        }\n        default:\n            return state;\n\n\n    }\n\n}","import { StoreConstants } from \"../StoreConstants\"\n\nexport function usersReducer(state = {}, action) {\n    switch (action.type) {\n        case StoreConstants.FETCH_USERS_LOADING: {\n            return {\n                ...state,\n                isLoading: true,\n                isError: false,\n                data: null\n            };\n        }\n        case StoreConstants.FETCH_USERS_SUCCESS: {\n            return {\n                ...state,\n                isLoading: false,\n                isError: false,\n                data: action.response\n            };\n        }\n        case StoreConstants.FETCH_USERS_FAILED: {\n            return {\n                ...state,\n                isLoading: false,\n                isError: true,\n                data: null,\n                message:action.failedMessage\n            };\n        }\n        default:\n            return state;\n\n\n    }\n\n}","import { StoreConstants } from \"../StoreConstants\"\n\nexport function chatMessagesReducer(state = {}, action) {\n    switch (action.type) {\n        case StoreConstants.FETCH_CHAT_MSGS_LOADING: {\n            return {\n                ...state,\n                isLoading: true,\n                isError: false,\n                data: null\n            };\n        }\n        case StoreConstants.FETCH_CHAT_MSGS_SUCCESS: {\n            return {\n                ...state,\n                isLoading: false,\n                isError: false,\n                data: action.response\n            };\n        }\n        case StoreConstants.FETCH_CHAT_MSGS_FAILED: {\n            return {\n                ...state,\n                isLoading: false,\n                isError: true,\n                data: null,\n                message:action.failedMessage\n            };\n        }\n        default:\n            return state;\n\n\n    }\n\n}","import { StoreConstants } from \"../StoreConstants\"\n\nexport function signUpReducer(state = {}, action) {\n    switch (action.type) {\n        case StoreConstants.SIGNUP_LOADING: {\n            return {\n                ...state,\n                isLoading: true,\n                isError: false,\n                data: null,\n                message:null,\n                statusCode: null\n            };\n        }\n        case StoreConstants.SIGNUP_SUCCESS: {\n            return {\n                ...state,\n                isLoading: false,\n                isError: false,\n                data: action.response.result[0],\n                message:action.response.description,\n                statusCode: action.response.statusCode\n            };\n        }\n        case StoreConstants.SIGNUP_FAILED: {\n            return {\n                ...state,\n                isLoading: false,\n                isError: true,\n                data: null,\n                message:action.response.description,\n                statusCode: action.response.statusCode\n            };\n        }\n        default:\n            return state;\n\n\n    }\n\n}","import rootReducer from './index';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from \"redux-thunk\";\nimport { createLogger } from \"redux-logger\";\n// const appStore = createStore(rootReducer,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\nconst middleware = [thunk];\n// eslint-disable-next-line no-undef\nif (process.env.NODE_ENV !== \"production\") {\n\tmiddleware.push(createLogger());\n}\n\nconst appStore = createStore(\n\trootReducer,\n\t{},\n\tapplyMiddleware(...middleware)\n);\nexport default appStore;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport appStore from './Store/ConfigureStore';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <Provider store={appStore}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}